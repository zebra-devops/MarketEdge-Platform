name: Staging Environment Deployment

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  # Staging environment configuration
  ENVIRONMENT: staging
  BACKEND_URL: https://marketedge-platform-staging.onrender.com
  FRONTEND_URL: https://staging.zebra.associates

jobs:
  staging-deploy-notification:
    name: üì¢ Staging Deployment Started
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment start
        run: |
          echo "üöÄ Staging deployment started"
          echo "Branch: staging"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo ""
          echo "Deployment will be handled by Render automatic deployment"
          echo "This workflow monitors the deployment and runs smoke tests"

  wait-for-staging-deploy:
    name: ‚è≥ Wait for Render Staging Deployment
    runs-on: ubuntu-latest
    needs: staging-deploy-notification
    timeout-minutes: 15
    steps:
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for Render to deploy staging environment..."
          echo "URL: ${{ env.BACKEND_URL }}"
          echo ""

          # Wait for health endpoint to be available
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt + 1))/$max_attempts: Checking health endpoint..."

            if curl -f -s "${{ env.BACKEND_URL }}/health" > /dev/null 2>&1; then
              echo "‚úÖ Health endpoint responding"
              break
            fi

            if [ $attempt -eq $((max_attempts - 1)) ]; then
              echo "‚ùå Health endpoint not responding after $max_attempts attempts"
              exit 1
            fi

            echo "Waiting 30 seconds before next check..."
            sleep 30
            attempt=$((attempt + 1))
          done

          echo ""
          echo "‚úÖ Staging deployment complete and health endpoint responding"

      - name: Verify deployment health
        run: |
          echo "Checking deployment health..."

          # Get health status
          health_response=$(curl -s "${{ env.BACKEND_URL }}/health")
          echo "Health response: $health_response"

          # Check for expected environment
          if echo "$health_response" | grep -q "staging"; then
            echo "‚úÖ Staging environment detected"
          else
            echo "‚ö†Ô∏è Warning: Environment might not be set to staging"
          fi

  staging-smoke-tests:
    name: üß™ Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: wait-for-staging-deploy
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: platform-wrapper/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: platform-wrapper/frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: platform-wrapper/frontend
        run: npx playwright install --with-deps chromium

      - name: Run staging smoke tests
        working-directory: platform-wrapper/frontend
        env:
          STAGING_API_URL: ${{ env.BACKEND_URL }}
          STAGING_FRONTEND_URL: ${{ env.FRONTEND_URL }}
          AUTH0_TEST_EMAIL: ${{ secrets.ZEBRA_TEST_EMAIL }}
          AUTH0_TEST_PASSWORD: ${{ secrets.ZEBRA_TEST_PASSWORD }}
        run: |
          echo "üß™ Running smoke tests against staging environment"
          echo "Backend URL: $STAGING_API_URL"
          echo "Frontend URL: $STAGING_FRONTEND_URL"
          echo ""

          # Run Playwright smoke tests
          # Note: Tests should be configured to use STAGING_API_URL and STAGING_FRONTEND_URL
          npx playwright test zebra-associates-smoke.spec.ts \
            --project=chromium \
            --reporter=list,html \
            --output=test-results/staging-smoke || exit_code=$?

          if [ ${exit_code:-0} -ne 0 ]; then
            echo "‚ùå Staging smoke tests failed"
            exit 1
          fi

          echo "‚úÖ Staging smoke tests passed"

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-smoke-test-results
          path: |
            platform-wrapper/frontend/test-results/
            platform-wrapper/frontend/playwright-report/
          retention-days: 30

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: staging-smoke-screenshots
          path: platform-wrapper/frontend/test-results/**/*.png
          retention-days: 30

  staging-api-tests:
    name: üîç Staging API Endpoint Tests
    runs-on: ubuntu-latest
    needs: wait-for-staging-deploy
    steps:
      - name: Test critical API endpoints
        run: |
          echo "Testing critical API endpoints..."

          # Test health endpoint
          echo "1. Testing /health endpoint..."
          health_status=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BACKEND_URL }}/health")
          if [ "$health_status" -eq 200 ]; then
            echo "‚úÖ Health endpoint: OK (200)"
          else
            echo "‚ùå Health endpoint: FAIL ($health_status)"
            exit 1
          fi

          # Test Auth0 URL endpoint
          echo "2. Testing Auth0 URL endpoint..."
          auth0_url_response=$(curl -s "${{ env.BACKEND_URL }}/api/v1/auth/auth0-url?redirect_uri=https://staging.zebra.associates/callback")

          if echo "$auth0_url_response" | grep -q "audience"; then
            echo "‚úÖ Auth0 URL includes audience parameter"
          else
            echo "‚ùå Auth0 URL missing audience parameter"
            exit 1
          fi

          # Test CORS headers
          echo "3. Testing CORS configuration..."
          cors_response=$(curl -s -I -H "Origin: https://staging.zebra.associates" "${{ env.BACKEND_URL }}/health")

          if echo "$cors_response" | grep -q "Access-Control-Allow-Origin"; then
            echo "‚úÖ CORS headers present"
          else
            echo "‚ö†Ô∏è Warning: CORS headers not found (may need configuration update)"
          fi

          echo ""
          echo "‚úÖ All critical API endpoint tests passed"

  staging-validation-summary:
    name: ‚úÖ Staging Deployment Summary
    runs-on: ubuntu-latest
    needs: [staging-smoke-tests, staging-api-tests]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "# Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.staging-smoke-tests.result }}" == "success" ] && [ "${{ needs.staging-api-tests.result }}" == "success" ]; then
            echo "‚úÖ **Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All staging tests passed. Environment is ready for UAT." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some staging tests failed. Please review logs and artifacts." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.staging-smoke-tests.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.staging-api-tests.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Environment URLs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ env.BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ env.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ${{ env.BACKEND_URL }}/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Perform UAT testing in staging environment" >> $GITHUB_STEP_SUMMARY
          echo "2. Validate all features work as expected" >> $GITHUB_STEP_SUMMARY
          echo "3. Get stakeholder approval" >> $GITHUB_STEP_SUMMARY
          echo "4. Create PR from \`staging\` to \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "5. After merge, create GitHub Release tag for production deployment" >> $GITHUB_STEP_SUMMARY

      - name: Notify team of deployment status
        if: always()
        run: |
          if [ "${{ needs.staging-smoke-tests.result }}" == "success" ] && [ "${{ needs.staging-api-tests.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
            echo "Environment ready for UAT testing"
          else
            echo "‚ùå Staging deployment failed"
            echo "Please review logs and artifacts"
            exit 1
          fi

  staging-deployment-failed:
    name: ‚ùå Staging Deployment Failed
    runs-on: ubuntu-latest
    needs: [staging-smoke-tests, staging-api-tests]
    if: failure()
    steps:
      - name: Report failure
        run: |
          echo "‚ùå Staging deployment or tests failed"
          echo ""
          echo "Failed jobs:"
          echo "- Smoke Tests: ${{ needs.staging-smoke-tests.result }}"
          echo "- API Tests: ${{ needs.staging-api-tests.result }}"
          echo ""
          echo "Please review:"
          echo "1. Render deployment logs: https://dashboard.render.com"
          echo "2. GitHub Actions logs (this workflow)"
          echo "3. Test artifacts uploaded to this workflow run"
          echo ""
          echo "Common issues:"
          echo "- Environment variables not configured"
          echo "- Database migration failure"
          echo "- Auth0 configuration mismatch"
          echo "- CORS configuration issue"

          exit 1
