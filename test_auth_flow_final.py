#!/usr/bin/env python3
"""
Final Authentication Flow Test

Tests the production authentication flow to confirm the 500 database error is resolved.
"""

import requests
import json
import sys

PRODUCTION_URL = "https://marketedge-platform.onrender.com"

def test_auth_related_endpoints():
    """Test various authentication-related endpoints to check for 500 errors"""
    
    endpoints_to_test = [
        ("/api/v1/users/", "Users endpoint (should require auth)"),
        ("/api/v1/organizations/", "Organizations endpoint (should require auth)"),
        ("/api/v1/auth/me", "Auth me endpoint (should require auth)"),
        ("/api/v1/auth/logout", "Logout endpoint"),
        ("/health", "Health check (should work)"),
        ("/", "Root endpoint (should work)"),
    ]
    
    results = {}
    
    print("üîç Testing authentication-related endpoints for database errors...")
    print()
    
    for endpoint, description in endpoints_to_test:
        print(f"Testing: {endpoint}")
        print(f"   Description: {description}")
        
        try:
            response = requests.get(f"{PRODUCTION_URL}{endpoint}", timeout=30)
            status_code = response.status_code
            
            print(f"   Status Code: {status_code}")
            
            if status_code == 500:
                print("   ‚ùå 500 ERROR DETECTED - Database schema issue still exists!")
                try:
                    error_data = response.json()
                    print(f"   Error Details: {error_data}")
                except:
                    print(f"   Error Text: {response.text[:200]}...")
                results[endpoint] = {"status": 500, "error": True, "description": description}
                
            elif status_code in [200, 401, 403, 404, 422]:
                print(f"   ‚úÖ Expected status code - no database error")
                results[endpoint] = {"status": status_code, "error": False, "description": description}
                
            else:
                print(f"   ‚ö†Ô∏è  Unexpected status code: {status_code}")
                results[endpoint] = {"status": status_code, "error": False, "description": description}
                
        except Exception as e:
            print(f"   ‚ùå Request failed: {e}")
            results[endpoint] = {"status": "error", "error": True, "description": description}
            
        print()
    
    return results

def analyze_results(results):
    """Analyze the test results"""
    print("="*80)
    print("FINAL AUTHENTICATION DATABASE ERROR ANALYSIS")
    print("="*80)
    print()
    
    total_endpoints = len(results)
    error_500_count = 0
    working_endpoints = 0
    
    print("ENDPOINT TEST RESULTS:")
    print("-" * 40)
    
    for endpoint, result in results.items():
        status = result["status"]
        description = result["description"]
        
        if status == 500:
            print(f"‚ùå {endpoint}: 500 ERROR - {description}")
            error_500_count += 1
        elif status in [200, 401, 403, 404, 422]:
            print(f"‚úÖ {endpoint}: {status} - {description}")
            working_endpoints += 1
        else:
            print(f"‚ö†Ô∏è  {endpoint}: {status} - {description}")
            working_endpoints += 1
    
    print()
    print("SUMMARY:")
    print("-" * 40)
    print(f"Total Endpoints Tested: {total_endpoints}")
    print(f"Working Endpoints (no 500): {working_endpoints}")
    print(f"500 Database Errors: {error_500_count}")
    print()
    
    if error_500_count == 0:
        print("üéØ SUCCESS: NO 500 DATABASE ERRORS DETECTED!")
        print("   ‚úÖ The emergency database schema fix was SUCCESSFUL")
        print("   ‚úÖ Authentication 500 errors have been RESOLVED")
        print("   ‚úÖ Production database schema is correct")
        print("   ‚úÖ Users can now authenticate without database errors")
        print()
        print("RECOMMENDATION: The production system is ready for use")
        return True
        
    else:
        print("‚ùå FAILURE: 500 DATABASE ERRORS STILL DETECTED!")
        print("   ‚ùå The emergency database schema fix was NOT successful")
        print("   ‚ùå Authentication 500 errors PERSIST")
        print("   ‚ùå Missing Base columns are still causing issues")
        print()
        print("RECOMMENDATION: Manual database schema repair needed")
        return False

def main():
    """Main test function"""
    print("üöÄ MarketEdge Final Authentication Flow Test")
    print("Testing for Database Schema 500 Errors")
    print("=" * 70)
    print(f"üéØ Production URL: {PRODUCTION_URL}")
    print()
    
    # Run the tests
    results = test_auth_related_endpoints()
    
    # Analyze results
    success = analyze_results(results)
    
    print("="*80)
    
    if success:
        print("‚úÖ FINAL CONCLUSION: Production database schema fix is SUCCESSFUL")
        print("   The 500 'Database error during authentication' has been RESOLVED")
        sys.exit(0)
    else:
        print("‚ùå FINAL CONCLUSION: Production database schema issues PERSIST")
        print("   Manual intervention required to fix missing Base columns")
        sys.exit(1)

if __name__ == "__main__":
    main()