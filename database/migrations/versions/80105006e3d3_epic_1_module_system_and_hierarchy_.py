"""Epic 1: Module system and hierarchy updates

Revision ID: 80105006e3d3
Revises: 010
Create Date: 2025-08-28 23:17:35.045079

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision = '80105006e3d3'
down_revision = '010'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Import defensive migration utilities
    from database.migrations.utils import get_validator
    validator = get_validator()

    # Check if tables already exist (idempotency for overlapping migrations)
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if 'industry_templates' not in existing_tables:
        op.create_table('industry_templates',
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('industry_code', sa.String(length=20), nullable=False),
        sa.Column('display_name', sa.String(length=200), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('default_settings', sa.Text(), nullable=False),
        sa.Column('default_permissions', sa.Text(), nullable=False),
        sa.Column('default_features', sa.Text(), nullable=False),
        sa.Column('dashboard_config', sa.Text(), nullable=True),
        sa.Column('parent_template_id', postgresql.UUID(), nullable=True),
        sa.Column('is_base_template', sa.Boolean(), nullable=False),
        sa.Column('customizable_fields', sa.Text(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('version', sa.String(length=20), nullable=False),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['parent_template_id'], ['industry_templates.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('idx_industry_template_code_active', 'industry_templates', ['industry_code', 'is_active'], unique=False)
        op.create_index('idx_industry_template_parent', 'industry_templates', ['parent_template_id', 'is_active'], unique=False)
        op.create_index(op.f('ix_industry_templates_industry_code'), 'industry_templates', ['industry_code'], unique=True)
        op.create_index(op.f('ix_industry_templates_name'), 'industry_templates', ['name'], unique=True)

    if 'organization_hierarchy' not in existing_tables:
        op.create_table('organization_hierarchy',
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('slug', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('parent_id', postgresql.UUID(), nullable=True),
        sa.Column('level', sa.Enum('ORGANIZATION', 'LOCATION', 'DEPARTMENT', 'USER', name='hierarchylevel', create_type=False), nullable=False),
        sa.Column('hierarchy_path', sa.String(length=500), nullable=False),
        sa.Column('depth', sa.Integer(), nullable=False),
        sa.Column('legacy_organisation_id', postgresql.UUID(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('settings', sa.Text(), nullable=True),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['legacy_organisation_id'], ['organisations.id'], ),
        sa.ForeignKeyConstraint(['parent_id'], ['organization_hierarchy.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('slug', 'parent_id', name='uq_hierarchy_slug_parent')
        )
        op.create_index('idx_hierarchy_level_active', 'organization_hierarchy', ['level', 'is_active'], unique=False)
        op.create_index('idx_hierarchy_parent_level', 'organization_hierarchy', ['parent_id', 'level'], unique=False)
        op.create_index('idx_hierarchy_path', 'organization_hierarchy', ['hierarchy_path'], unique=False)
        op.create_index(op.f('ix_organization_hierarchy_hierarchy_path'), 'organization_hierarchy', ['hierarchy_path'], unique=False)
        op.create_index(op.f('ix_organization_hierarchy_name'), 'organization_hierarchy', ['name'], unique=False)
        op.create_index(op.f('ix_organization_hierarchy_slug'), 'organization_hierarchy', ['slug'], unique=True)

    if 'hierarchy_permission_overrides' not in existing_tables:
        op.create_table('hierarchy_permission_overrides',
        sa.Column('user_id', postgresql.UUID(), nullable=False),
        sa.Column('hierarchy_node_id', postgresql.UUID(), nullable=False),
        sa.Column('permission', sa.String(length=100), nullable=False),
        sa.Column('granted', sa.Boolean(), nullable=False),
        sa.Column('reason', sa.String(length=500), nullable=True),
        sa.Column('granted_by', postgresql.UUID(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['hierarchy_node_id'], ['organization_hierarchy.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'hierarchy_node_id', 'permission', name='uq_user_permission_override')
        )
        op.create_index('idx_permission_override_node_permission', 'hierarchy_permission_overrides', ['hierarchy_node_id', 'permission'], unique=False)
        op.create_index('idx_permission_override_user_active', 'hierarchy_permission_overrides', ['user_id', 'is_active'], unique=False)

    if 'hierarchy_role_assignments' not in existing_tables:
        op.create_table('hierarchy_role_assignments',
        sa.Column('hierarchy_node_id', postgresql.UUID(), nullable=False),
        sa.Column('role', sa.Enum('super_admin', 'org_admin', 'location_manager', 'department_lead', 'user', 'viewer', name='enhanceduserrole', create_type=False), nullable=False),
        sa.Column('permissions', sa.Text(), nullable=False),
        sa.Column('inherits_from_parent', sa.Boolean(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['hierarchy_node_id'], ['organization_hierarchy.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('hierarchy_node_id', 'role', name='uq_hierarchy_role')
        )
        op.create_index('idx_hierarchy_role_active', 'hierarchy_role_assignments', ['role', 'is_active'], unique=False)
        op.create_index('idx_hierarchy_role_node', 'hierarchy_role_assignments', ['hierarchy_node_id', 'is_active'], unique=False)

    if 'organization_template_applications' not in existing_tables:
        op.create_table('organization_template_applications',
        sa.Column('organization_id', postgresql.UUID(), nullable=False),
        sa.Column('template_id', postgresql.UUID(), nullable=False),
        sa.Column('applied_settings', sa.Text(), nullable=False),
        sa.Column('customizations', sa.Text(), nullable=True),
        sa.Column('applied_by', postgresql.UUID(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['applied_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['organization_id'], ['organisations.id'], ),
        sa.ForeignKeyConstraint(['template_id'], ['industry_templates.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('organization_id', 'template_id', name='uq_org_template_application')
        )
        op.create_index('idx_org_template_org_active', 'organization_template_applications', ['organization_id', 'is_active'], unique=False)
        op.create_index('idx_org_template_template_active', 'organization_template_applications', ['template_id', 'is_active'], unique=False)

    if 'user_hierarchy_assignments' not in existing_tables:
        op.create_table('user_hierarchy_assignments',
        sa.Column('user_id', postgresql.UUID(), nullable=False),
        sa.Column('hierarchy_node_id', postgresql.UUID(), nullable=False),
        sa.Column('role', sa.Enum('super_admin', 'org_admin', 'location_manager', 'department_lead', 'user', 'viewer', name='enhanceduserrole', create_type=False), nullable=False),
        sa.Column('is_primary', sa.Boolean(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['hierarchy_node_id'], ['organization_hierarchy.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'hierarchy_node_id', name='uq_user_hierarchy_assignment')
        )
        op.create_index('idx_user_hierarchy_node_role', 'user_hierarchy_assignments', ['hierarchy_node_id', 'role'], unique=False)
        op.create_index('idx_user_hierarchy_user_active', 'user_hierarchy_assignments', ['user_id', 'is_active'], unique=False)
    op.drop_index('ix_pricing_data_competitor_id', table_name='pricing_data')
    op.drop_index('ix_pricing_data_date_collected', table_name='pricing_data')
    op.drop_index('ix_pricing_data_market_id', table_name='pricing_data')
    op.drop_index('ix_pricing_data_product_service', table_name='pricing_data')
    op.drop_table('pricing_data')
    op.drop_index('ix_competitive_insights_insight_type', table_name='competitive_insights')
    op.drop_index('ix_competitive_insights_market_id', table_name='competitive_insights')
    op.drop_index('ix_competitive_insights_organisation_id', table_name='competitive_insights')
    op.drop_table('competitive_insights')
    op.drop_index('ix_market_alerts_alert_type', table_name='market_alerts')
    op.drop_index('ix_market_alerts_created_at', table_name='market_alerts')
    op.drop_index('ix_market_alerts_market_id', table_name='market_alerts')
    op.drop_index('ix_market_alerts_organisation_id', table_name='market_alerts')
    op.drop_table('market_alerts')
    op.drop_index('ix_competitors_market_id', table_name='competitors')
    op.drop_index('ix_competitors_name', table_name='competitors')
    op.drop_index('ix_competitors_organisation_id', table_name='competitors')
    op.drop_table('competitors')
    op.drop_index('ix_user_market_preferences_market_id', table_name='user_market_preferences')
    op.drop_index('ix_user_market_preferences_user_id', table_name='user_market_preferences')
    op.drop_table('user_market_preferences')
    op.drop_index('idx_import_batches_created_at', table_name='import_batches')
    op.drop_index('idx_import_batches_organisation_id', table_name='import_batches')
    op.drop_index('idx_import_batches_status', table_name='import_batches')
    op.drop_index('idx_import_batches_uploaded_by', table_name='import_batches')
    op.drop_table('import_batches')
    op.drop_index('idx_import_errors_import_batch_id', table_name='import_errors')
    op.drop_index('idx_import_errors_row_number', table_name='import_errors')
    op.drop_table('import_errors')
    op.drop_index('ix_market_analytics_market_id', table_name='market_analytics')
    op.drop_index('ix_market_analytics_metric_type', table_name='market_analytics')
    op.drop_index('ix_market_analytics_organisation_id', table_name='market_analytics')
    op.drop_index('ix_market_analytics_period_start', table_name='market_analytics')
    op.drop_table('market_analytics')
    op.drop_index('ix_markets_name', table_name='markets')
    op.drop_index('ix_markets_organisation_id', table_name='markets')
    op.drop_table('markets')
    # Use defensive column additions to prevent duplicate column errors
    validator.safe_add_column('admin_actions', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    validator.safe_add_column('audit_logs', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    validator.safe_add_column('audit_logs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('audit_logs', 'ip_address',
               existing_type=postgresql.INET(),
               type_=sa.String(length=45),
               existing_nullable=True)
    op.drop_index('idx_audit_logs_organisation_id', table_name='audit_logs')
    op.drop_index('idx_audit_logs_resource', table_name='audit_logs')
    op.drop_index('idx_audit_logs_timestamp_action', table_name='audit_logs')
    op.drop_index('idx_audit_logs_user_action', table_name='audit_logs')
    validator.safe_add_column('feature_flag_overrides', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_index('idx_feature_flag_overrides_organisation_id', table_name='feature_flag_overrides')
    validator.safe_add_column('feature_flag_usage', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    validator.safe_add_column('feature_flag_usage', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_index('idx_feature_flag_usage_flag', table_name='feature_flag_usage')
    op.drop_index('idx_feature_flag_usage_org', table_name='feature_flag_usage')
    op.drop_index('idx_feature_flag_usage_organisation_id', table_name='feature_flag_usage')
    op.drop_index('idx_feature_flags_module_enabled', table_name='feature_flags')
    op.drop_index('idx_feature_flags_scope_enabled', table_name='feature_flags')
    op.drop_index('idx_feature_flags_unique_scope', table_name='feature_flags')
    op.drop_index('idx_module_configurations_organisation_id', table_name='module_configurations')
    validator.safe_add_column('module_usage_logs', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    validator.safe_add_column('module_usage_logs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_index('idx_module_usage_logs_module', table_name='module_usage_logs')
    op.drop_index('idx_module_usage_logs_organisation_id', table_name='module_usage_logs')
    op.drop_index('idx_module_usage_logs_timestamp', table_name='module_usage_logs')
    op.drop_index('idx_organisation_modules_enabled', table_name='organisation_modules')
    op.drop_index('idx_organisation_modules_organisation_id', table_name='organisation_modules')
    op.alter_column('organisation_tool_access', 'features_enabled',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('organisation_tool_access', 'usage_limits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.drop_constraint('organisations_name_key', 'organisations', type_='unique')
    op.drop_index('ix_organisations_name', table_name='organisations')
    op.create_index(op.f('ix_organisations_name'), 'organisations', ['name'], unique=True)
    op.drop_constraint('tools_name_key', 'tools', type_='unique')
    op.drop_index('ix_tools_name', table_name='tools')
    op.create_index(op.f('ix_tools_name'), 'tools', ['name'], unique=True)
    op.alter_column('user_application_access', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_user_application_access_application', table_name='user_application_access')
    op.drop_index('idx_user_application_access_user_id', table_name='user_application_access')
    op.drop_constraint('user_application_access_user_id_application_key', 'user_application_access', type_='unique')
    op.drop_constraint('user_application_access_granted_by_fkey', 'user_application_access', type_='foreignkey')
    op.drop_constraint('user_application_access_user_id_fkey', 'user_application_access', type_='foreignkey')
    op.create_foreign_key(None, 'user_application_access', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_application_access', 'users', ['granted_by'], ['id'])
    op.alter_column('user_invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_user_invitations_expires_at', table_name='user_invitations')
    op.drop_index('idx_user_invitations_status', table_name='user_invitations')
    op.drop_index('idx_user_invitations_token', table_name='user_invitations')
    op.drop_index('idx_user_invitations_user_id', table_name='user_invitations')
    op.drop_constraint('user_invitations_invited_by_fkey', 'user_invitations', type_='foreignkey')
    op.drop_constraint('user_invitations_user_id_fkey', 'user_invitations', type_='foreignkey')
    op.create_foreign_key(None, 'user_invitations', 'users', ['invited_by'], ['id'])
    op.create_foreign_key(None, 'user_invitations', 'users', ['user_id'], ['id'])
    op.drop_index('idx_users_organisation_id', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_index('ix_users_email', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # Import defensive migration utilities
    from database.migrations.utils import get_validator
    validator = get_validator()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_organisation_id', 'users', ['organisation_id'], unique=False)
    op.drop_constraint(None, 'user_invitations', type_='foreignkey')
    op.drop_constraint(None, 'user_invitations', type_='foreignkey')
    op.create_foreign_key('user_invitations_user_id_fkey', 'user_invitations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('user_invitations_invited_by_fkey', 'user_invitations', 'users', ['invited_by'], ['id'], ondelete='CASCADE')
    op.create_index('idx_user_invitations_user_id', 'user_invitations', ['user_id'], unique=False)
    op.create_index('idx_user_invitations_token', 'user_invitations', ['invitation_token'], unique=False)
    op.create_index('idx_user_invitations_status', 'user_invitations', ['status'], unique=False)
    op.create_index('idx_user_invitations_expires_at', 'user_invitations', ['expires_at'], unique=False)
    op.alter_column('user_invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'user_application_access', type_='foreignkey')
    op.drop_constraint(None, 'user_application_access', type_='foreignkey')
    op.create_foreign_key('user_application_access_user_id_fkey', 'user_application_access', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('user_application_access_granted_by_fkey', 'user_application_access', 'users', ['granted_by'], ['id'], ondelete='SET NULL')
    op.create_unique_constraint('user_application_access_user_id_application_key', 'user_application_access', ['user_id', 'application'])
    op.create_index('idx_user_application_access_user_id', 'user_application_access', ['user_id'], unique=False)
    op.create_index('idx_user_application_access_application', 'user_application_access', ['application'], unique=False)
    op.alter_column('user_application_access', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_tools_name'), table_name='tools')
    op.create_index('ix_tools_name', 'tools', ['name'], unique=False)
    op.create_unique_constraint('tools_name_key', 'tools', ['name'])
    op.drop_index(op.f('ix_organisations_name'), table_name='organisations')
    op.create_index('ix_organisations_name', 'organisations', ['name'], unique=False)
    op.create_unique_constraint('organisations_name_key', 'organisations', ['name'])
    op.alter_column('organisation_tool_access', 'usage_limits',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('organisation_tool_access', 'features_enabled',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.create_index('idx_organisation_modules_organisation_id', 'organisation_modules', ['organisation_id'], unique=False)
    op.create_index('idx_organisation_modules_enabled', 'organisation_modules', ['organisation_id', 'is_enabled'], unique=False)
    op.create_index('idx_module_usage_logs_timestamp', 'module_usage_logs', ['timestamp'], unique=False)
    op.create_index('idx_module_usage_logs_organisation_id', 'module_usage_logs', ['organisation_id'], unique=False)
    op.create_index('idx_module_usage_logs_module', 'module_usage_logs', ['module_id', 'organisation_id'], unique=False)
    if validator.column_exists('module_usage_logs', 'updated_at'):
        op.drop_column('module_usage_logs', 'updated_at')
    if validator.column_exists('module_usage_logs', 'created_at'):
        op.drop_column('module_usage_logs', 'created_at')
    op.create_index('idx_module_configurations_organisation_id', 'module_configurations', ['organisation_id'], unique=False)
    op.create_index('idx_feature_flags_unique_scope', 'feature_flags', ['flag_key', 'scope'], unique=False)
    op.create_index('idx_feature_flags_scope_enabled', 'feature_flags', ['scope', 'is_enabled'], unique=False)
    op.create_index('idx_feature_flags_module_enabled', 'feature_flags', ['module_id', 'is_enabled'], unique=False)
    op.create_index('idx_feature_flag_usage_organisation_id', 'feature_flag_usage', ['organisation_id'], unique=False)
    op.create_index('idx_feature_flag_usage_org', 'feature_flag_usage', ['organisation_id', 'accessed_at'], unique=False)
    op.create_index('idx_feature_flag_usage_flag', 'feature_flag_usage', ['feature_flag_id', 'accessed_at'], unique=False)
    if validator.column_exists('feature_flag_usage', 'updated_at'):
        op.drop_column('feature_flag_usage', 'updated_at')
    if validator.column_exists('feature_flag_usage', 'created_at'):
        op.drop_column('feature_flag_usage', 'created_at')
    op.create_index('idx_feature_flag_overrides_organisation_id', 'feature_flag_overrides', ['organisation_id'], unique=False)
    if validator.column_exists('feature_flag_overrides', 'updated_at'):
        op.drop_column('feature_flag_overrides', 'updated_at')
    op.create_index('idx_audit_logs_user_action', 'audit_logs', ['user_id', 'action'], unique=False)
    op.create_index('idx_audit_logs_timestamp_action', 'audit_logs', ['timestamp', 'action'], unique=False)
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_organisation_id', 'audit_logs', ['organisation_id'], unique=False)
    op.alter_column('audit_logs', 'ip_address',
               existing_type=sa.String(length=45),
               type_=postgresql.INET(),
               existing_nullable=True)
    if validator.column_exists('audit_logs', 'updated_at'):
        op.drop_column('audit_logs', 'updated_at')
    if validator.column_exists('audit_logs', 'created_at'):
        op.drop_column('audit_logs', 'created_at')
    # Safe column drops - only if they exist
    if validator.column_exists('admin_actions', 'updated_at'):
        op.drop_column('admin_actions', 'updated_at')
    op.create_table('markets',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('geographic_bounds', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('competitor_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('tracking_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='markets_created_by_fkey'),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='markets_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='markets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_markets_organisation_id', 'markets', ['organisation_id'], unique=False)
    op.create_index('ix_markets_name', 'markets', ['name'], unique=False)
    op.create_table('market_analytics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('period_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('period_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('calculation_method', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='market_analytics_market_id_fkey'),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='market_analytics_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='market_analytics_pkey')
    )
    op.create_index('ix_market_analytics_period_start', 'market_analytics', ['period_start'], unique=False)
    op.create_index('ix_market_analytics_organisation_id', 'market_analytics', ['organisation_id'], unique=False)
    op.create_index('ix_market_analytics_metric_type', 'market_analytics', ['metric_type'], unique=False)
    op.create_index('ix_market_analytics_market_id', 'market_analytics', ['market_id'], unique=False)
    op.create_table('import_errors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('import_batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('row_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('row_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['import_batch_id'], ['import_batches.id'], name='import_errors_import_batch_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='import_errors_pkey')
    )
    op.create_index('idx_import_errors_row_number', 'import_errors', ['row_number'], unique=False)
    op.create_index('idx_import_errors_import_batch_id', 'import_errors', ['import_batch_id'], unique=False)
    op.create_table('import_batches',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'completed', 'failed', 'cancelled', name='importstatus', create_type=False), server_default=sa.text("'pending'::importstatus"), autoincrement=False, nullable=False),
    sa.Column('total_rows', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('processed_rows', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('successful_rows', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('failed_rows', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='import_batches_organisation_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='import_batches_uploaded_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='import_batches_pkey')
    )
    op.create_index('idx_import_batches_uploaded_by', 'import_batches', ['uploaded_by'], unique=False)
    op.create_index('idx_import_batches_status', 'import_batches', ['status'], unique=False)
    op.create_index('idx_import_batches_organisation_id', 'import_batches', ['organisation_id'], unique=False)
    op.create_index('idx_import_batches_created_at', 'import_batches', ['created_at'], unique=False)
    op.create_table('user_market_preferences',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('dashboard_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('alert_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('favorite_competitors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='user_market_preferences_market_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_market_preferences_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_market_preferences_pkey'),
    sa.UniqueConstraint('user_id', 'market_id', name='uq_user_market_preference')
    )
    op.create_index('ix_user_market_preferences_user_id', 'user_market_preferences', ['user_id'], unique=False)
    op.create_index('ix_user_market_preferences_market_id', 'user_market_preferences', ['market_id'], unique=False)
    op.create_table('competitors',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('business_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('locations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tracking_priority', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('market_share_estimate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='competitors_market_id_fkey'),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='competitors_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='competitors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_competitors_organisation_id', 'competitors', ['organisation_id'], unique=False)
    op.create_index('ix_competitors_name', 'competitors', ['name'], unique=False)
    op.create_index('ix_competitors_market_id', 'competitors', ['market_id'], unique=False)
    op.create_table('market_alerts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('trigger_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='market_alerts_market_id_fkey'),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='market_alerts_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='market_alerts_pkey')
    )
    op.create_index('ix_market_alerts_organisation_id', 'market_alerts', ['organisation_id'], unique=False)
    op.create_index('ix_market_alerts_market_id', 'market_alerts', ['market_id'], unique=False)
    op.create_index('ix_market_alerts_created_at', 'market_alerts', ['created_at'], unique=False)
    op.create_index('ix_market_alerts_alert_type', 'market_alerts', ['alert_type'], unique=False)
    op.create_table('competitive_insights',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('impact_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('data_points', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='competitive_insights_market_id_fkey'),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name='competitive_insights_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='competitive_insights_pkey')
    )
    op.create_index('ix_competitive_insights_organisation_id', 'competitive_insights', ['organisation_id'], unique=False)
    op.create_index('ix_competitive_insights_market_id', 'competitive_insights', ['market_id'], unique=False)
    op.create_index('ix_competitive_insights_insight_type', 'competitive_insights', ['insight_type'], unique=False)
    op.create_table('pricing_data',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('competitor_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('market_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_service', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('price_point', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'GBP'::character varying"), autoincrement=False, nullable=False),
    sa.Column('date_collected', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_promotion', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('promotion_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['competitor_id'], ['competitors.id'], name='pricing_data_competitor_id_fkey'),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], name='pricing_data_market_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pricing_data_pkey')
    )
    op.create_index('ix_pricing_data_product_service', 'pricing_data', ['product_service'], unique=False)
    op.create_index('ix_pricing_data_market_id', 'pricing_data', ['market_id'], unique=False)
    op.create_index('ix_pricing_data_date_collected', 'pricing_data', ['date_collected'], unique=False)
    op.create_index('ix_pricing_data_competitor_id', 'pricing_data', ['competitor_id'], unique=False)
    op.drop_index('idx_user_hierarchy_user_active', table_name='user_hierarchy_assignments')
    op.drop_index('idx_user_hierarchy_node_role', table_name='user_hierarchy_assignments')
    op.drop_table('user_hierarchy_assignments')
    op.drop_index('idx_org_template_template_active', table_name='organization_template_applications')
    op.drop_index('idx_org_template_org_active', table_name='organization_template_applications')
    op.drop_table('organization_template_applications')
    op.drop_index('idx_hierarchy_role_node', table_name='hierarchy_role_assignments')
    op.drop_index('idx_hierarchy_role_active', table_name='hierarchy_role_assignments')
    op.drop_table('hierarchy_role_assignments')
    op.drop_index('idx_permission_override_user_active', table_name='hierarchy_permission_overrides')
    op.drop_index('idx_permission_override_node_permission', table_name='hierarchy_permission_overrides')
    op.drop_table('hierarchy_permission_overrides')
    op.drop_index(op.f('ix_organization_hierarchy_slug'), table_name='organization_hierarchy')
    op.drop_index(op.f('ix_organization_hierarchy_name'), table_name='organization_hierarchy')
    op.drop_index(op.f('ix_organization_hierarchy_hierarchy_path'), table_name='organization_hierarchy')
    op.drop_index('idx_hierarchy_path', table_name='organization_hierarchy')
    op.drop_index('idx_hierarchy_parent_level', table_name='organization_hierarchy')
    op.drop_index('idx_hierarchy_level_active', table_name='organization_hierarchy')
    op.drop_table('organization_hierarchy')
    op.drop_index(op.f('ix_industry_templates_name'), table_name='industry_templates')
    op.drop_index(op.f('ix_industry_templates_industry_code'), table_name='industry_templates')
    op.drop_index('idx_industry_template_parent', table_name='industry_templates')
    op.drop_index('idx_industry_template_code_active', table_name='industry_templates')
    op.drop_table('industry_templates')
    # ### end Alembic commands ###