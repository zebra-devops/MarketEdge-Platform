#!/usr/bin/env node

/**
 * Authentication Fix Validation Script
 * Tests token storage and retrieval mechanisms
 */

console.log('üîß Testing Authentication Fix for Local Development')
console.log('=' .repeat(60))

// Simulate browser environment
global.localStorage = {
  data: {},
  getItem: function(key) { return this.data[key] || null },
  setItem: function(key, value) { this.data[key] = value },
  removeItem: function(key) { delete this.data[key] }
}

// Simulate cookie functionality
global.document = {
  cookie: ''
}

// Mock Cookies library
const mockCookies = {
  set: function(key, value, options) {
    console.log(`üìù Mock Cookie Set: ${key} = ${value.substring(0, 20)}...`)
    global.document.cookie += `${key}=${value}; `
    return true
  },
  get: function(key) {
    const match = global.document.cookie.match(`${key}=([^;]+)`)
    const value = match ? match[1] : null
    console.log(`üç™ Mock Cookie Get: ${key} = ${value ? value.substring(0, 20) + '...' : 'null'}`)
    return value
  }
}

// Test token storage and retrieval
function testTokenMechanisms() {
  console.log('\n1. Testing Token Storage Mechanisms...')
  
  const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token'
  const mockRefreshToken = 'refresh_token_example_12345'
  
  // Test localStorage storage
  console.log('\n   Testing localStorage storage:')
  localStorage.setItem('access_token', mockToken)
  localStorage.setItem('refresh_token', mockRefreshToken)
  
  const storedToken = localStorage.getItem('access_token')
  const storedRefresh = localStorage.getItem('refresh_token')
  
  console.log(`   ‚úÖ Access Token Stored: ${!!storedToken}`)
  console.log(`   ‚úÖ Refresh Token Stored: ${!!storedRefresh}`)
  
  // Test cookie storage (mock)
  console.log('\n   Testing cookie storage:')
  mockCookies.set('access_token', mockToken, {})
  mockCookies.set('refresh_token', mockRefreshToken, {})
  
  const cookieToken = mockCookies.get('access_token')
  const cookieRefresh = mockCookies.get('refresh_token')
  
  console.log(`   ‚úÖ Cookie Access Token: ${!!cookieToken}`)
  console.log(`   ‚úÖ Cookie Refresh Token: ${!!cookieRefresh}`)
  
  return {
    localStorage: { access: !!storedToken, refresh: !!storedRefresh },
    cookies: { access: !!cookieToken, refresh: !!cookieRefresh }
  }
}

// Test token retrieval priority
function testTokenRetrievalPriority() {
  console.log('\n2. Testing Token Retrieval Priority...')
  
  // Clear all storage
  localStorage.removeItem('access_token')
  global.document.cookie = ''
  
  // Test 1: LocalStorage has token, cookies don't
  console.log('\n   Test 1: localStorage priority')
  localStorage.setItem('access_token', 'localStorage_token')
  
  // Simulate the fixed getToken() logic
  function getToken() {
    const localToken = localStorage.getItem('access_token')
    if (localToken) {
      console.log('   ‚úÖ Token retrieved from localStorage')
      return localToken
    }
    
    const cookieToken = mockCookies.get('access_token')
    if (cookieToken) {
      console.log('   ‚úÖ Token retrieved from cookies')
      return cookieToken
    }
    
    console.log('   ‚ö†Ô∏è  No access token found')
    return undefined
  }
  
  const token1 = getToken()
  console.log(`   Result: ${token1 ? 'SUCCESS' : 'FAILED'}`)
  
  // Test 2: Only cookies have token
  console.log('\n   Test 2: Cookie fallback')
  localStorage.removeItem('access_token')
  mockCookies.set('access_token', 'cookie_token', {})
  
  const token2 = getToken()
  console.log(`   Result: ${token2 ? 'SUCCESS' : 'FAILED'}`)
  
  // Test 3: No tokens anywhere
  console.log('\n   Test 3: No tokens')
  localStorage.removeItem('access_token')
  global.document.cookie = ''
  
  const token3 = getToken()
  console.log(`   Result: ${token3 ? 'UNEXPECTED' : 'CORRECTLY_EMPTY'}`)
  
  return { test1: !!token1, test2: !!token2, test3: !token3 }
}

// Test API interceptor logic
function testAPIInterceptorLogic() {
  console.log('\n3. Testing API Interceptor Logic...')
  
  // Setup test token
  localStorage.setItem('access_token', 'test_api_token_12345')
  
  // Simulate the fixed API interceptor logic
  function simulateAPIRequest(url) {
    let token = localStorage.getItem('access_token')
    if (!token) {
      token = mockCookies.get('access_token')
    }
    
    const isAuthRequest = url.includes('/auth/')
    const requiresAuth = !isAuthRequest && !url.includes('/health') && !url.includes('/cors-debug')
    
    console.log(`   API Request: ${url}`)
    console.log(`   Token available: ${token ? 'YES (length: ' + token.length + ')' : 'NO'}`)
    
    if (!token && requiresAuth) {
      console.log('   ‚ö†Ô∏è  No access token for protected endpoint')
      return false
    } else if (token) {
      console.log('   ‚úÖ Token found and will be included')
      return true
    }
    
    return true // Auth endpoints and health checks don't need tokens
  }
  
  // Test different endpoint types
  const results = {
    protectedEndpoint: simulateAPIRequest('/api/v1/organisations/industries'),
    authEndpoint: simulateAPIRequest('/api/v1/auth/login'),
    healthEndpoint: simulateAPIRequest('/health'),
    corsEndpoint: simulateAPIRequest('/cors-debug')
  }
  
  console.log(`   Protected endpoint: ${results.protectedEndpoint ? 'SUCCESS' : 'WOULD_FAIL'}`)
  console.log(`   Auth endpoint: ${results.authEndpoint ? 'SUCCESS' : 'FAILED'}`)
  console.log(`   Health endpoint: ${results.healthEndpoint ? 'SUCCESS' : 'FAILED'}`)
  console.log(`   CORS endpoint: ${results.corsEndpoint ? 'SUCCESS' : 'FAILED'}`)
  
  return results
}

// Run all tests
async function runAllTests() {
  const storageResults = testTokenMechanisms()
  const retrievalResults = testTokenRetrievalPriority()
  const interceptorResults = testAPIInterceptorLogic()
  
  console.log('\n' + '=' .repeat(60))
  console.log('üìä TEST SUMMARY')
  console.log('=' .repeat(60))
  
  const allStoragePassed = storageResults.localStorage.access && storageResults.localStorage.refresh
  const allRetrievalPassed = retrievalResults.test1 && retrievalResults.test2 && retrievalResults.test3
  const allInterceptorPassed = interceptorResults.protectedEndpoint && interceptorResults.authEndpoint && interceptorResults.healthEndpoint
  
  console.log(`Storage Mechanisms: ${allStoragePassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`)
  console.log(`Token Retrieval Priority: ${allRetrievalPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`)
  console.log(`API Interceptor Logic: ${allInterceptorPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`)
  
  if (allStoragePassed && allRetrievalPassed && allInterceptorPassed) {
    console.log('\nüéâ ALL TESTS PASSED!')
    console.log('\nThe authentication fix should resolve the "‚ùå No access token" issue:')
    console.log('‚Ä¢ Tokens are now stored in localStorage for local development')
    console.log('‚Ä¢ Token retrieval prioritizes localStorage over cookies')
    console.log('‚Ä¢ Enhanced debugging provides better error messages')
    console.log('‚Ä¢ API interceptor correctly handles different endpoint types')
  } else {
    console.log('\n‚ùå SOME TESTS FAILED')
    console.log('Review the implementation for any remaining issues.')
  }
  
  console.log('\nNext Steps:')
  console.log('1. Start the frontend development server (npm run dev)')
  console.log('2. Start the backend server (cd ../backend && python -m uvicorn app.main:app --reload)')
  console.log('3. Navigate to http://localhost:3000 and try logging in')
  console.log('4. Check the AuthDebugPanel for token storage status')
  console.log('5. Verify API requests include the Bearer token')
}

// Execute the tests
runAllTests().catch(console.error)