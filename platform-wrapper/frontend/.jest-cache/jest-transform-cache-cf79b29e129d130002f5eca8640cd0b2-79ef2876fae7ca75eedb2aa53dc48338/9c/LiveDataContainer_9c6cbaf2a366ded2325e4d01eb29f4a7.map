{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/ui/LiveDataContainer.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { \n  WifiIcon, \n  SignalIcon,\n  ClockIcon,\n  CheckCircleIcon\n} from '@heroicons/react/24/outline'\n\ninterface LiveDataContainerProps {\n  title: string\n  description?: string\n  lastUpdated?: Date\n  isConnected?: boolean\n  children: React.ReactNode\n  className?: string\n  showStatus?: boolean\n  connectionStatus?: 'connected' | 'connecting' | 'disconnected' | 'error'\n}\n\nexport default function LiveDataContainer({\n  title,\n  description,\n  lastUpdated,\n  isConnected = true,\n  children,\n  className = '',\n  showStatus = true,\n  connectionStatus = 'connected'\n}: LiveDataContainerProps) {\n  const getStatusInfo = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return {\n          icon: CheckCircleIcon,\n          color: 'text-green-600',\n          bgColor: 'bg-green-50',\n          borderColor: 'border-green-200',\n          text: 'Live Data',\n          description: 'Real-time updates active'\n        }\n      case 'connecting':\n        return {\n          icon: SignalIcon,\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-50',\n          borderColor: 'border-blue-200',\n          text: 'Connecting',\n          description: 'Establishing connection...'\n        }\n      case 'disconnected':\n        return {\n          icon: WifiIcon,\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-200',\n          text: 'Offline',\n          description: 'No live updates'\n        }\n      case 'error':\n        return {\n          icon: WifiIcon,\n          color: 'text-red-600',\n          bgColor: 'bg-red-50',\n          borderColor: 'border-red-200',\n          text: 'Connection Error',\n          description: 'Unable to connect to live data'\n        }\n    }\n  }\n\n  const statusInfo = getStatusInfo()\n\n  const formatLastUpdated = (date: Date) => {\n    const now = new Date()\n    const diffMs = now.getTime() - date.getTime()\n    const diffSecs = Math.floor(diffMs / 1000)\n    const diffMins = Math.floor(diffSecs / 60)\n    const diffHours = Math.floor(diffMins / 60)\n\n    if (diffSecs < 60) return 'Just now'\n    if (diffMins < 60) return `${diffMins}m ago`\n    if (diffHours < 24) return `${diffHours}h ago`\n    return date.toLocaleDateString()\n  }\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg shadow-sm ${className}`}>\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900\">{title}</h2>\n            {description && (\n              <p className=\"text-sm text-gray-600 mt-1\">{description}</p>\n            )}\n          </div>\n\n          {showStatus && (\n            <div className=\"flex items-center space-x-4\">\n              {/* Last Updated */}\n              {lastUpdated && (\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <ClockIcon className=\"h-4 w-4 mr-1\" />\n                  {formatLastUpdated(lastUpdated)}\n                </div>\n              )}\n\n              {/* Connection Status */}\n              <div className={`\n                inline-flex items-center px-3 py-1 rounded-full text-xs font-medium\n                ${statusInfo.bgColor} ${statusInfo.borderColor} border\n              `}>\n                <statusInfo.icon className={`h-3 w-3 mr-1 ${statusInfo.color}`} />\n                <span className={statusInfo.color}>{statusInfo.text}</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Status description for error states */}\n        {showStatus && (connectionStatus === 'error' || connectionStatus === 'disconnected') && (\n          <div className=\"mt-2\">\n            <p className=\"text-xs text-gray-500\">{statusInfo.description}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6\">\n        {children}\n      </div>\n    </div>\n  )\n}"],"names":["LiveDataContainer","title","description","lastUpdated","isConnected","children","className","showStatus","connectionStatus","getStatusInfo","icon","CheckCircleIcon","color","bgColor","borderColor","text","SignalIcon","WifiIcon","statusInfo","formatLastUpdated","date","now","Date","diffMs","getTime","diffSecs","Math","floor","diffMins","diffHours","toLocaleDateString","div","h2","p","ClockIcon","span"],"mappings":"AAAA;;;;;+BAqBA;;;eAAwBA;;;;8DAnBN;yBAMX;;;;;;AAaQ,SAASA,kBAAkB,EACxCC,KAAK,EACLC,WAAW,EACXC,WAAW,EACXC,cAAc,IAAI,EAClBC,QAAQ,EACRC,YAAY,EAAE,EACdC,aAAa,IAAI,EACjBC,mBAAmB,WAAW,EACP;IACvB,MAAMC,gBAAgB;QACpB,OAAQD;YACN,KAAK;gBACH,OAAO;oBACLE,MAAMC,wBAAe;oBACrBC,OAAO;oBACPC,SAAS;oBACTC,aAAa;oBACbC,MAAM;oBACNb,aAAa;gBACf;YACF,KAAK;gBACH,OAAO;oBACLQ,MAAMM,mBAAU;oBAChBJ,OAAO;oBACPC,SAAS;oBACTC,aAAa;oBACbC,MAAM;oBACNb,aAAa;gBACf;YACF,KAAK;gBACH,OAAO;oBACLQ,MAAMO,iBAAQ;oBACdL,OAAO;oBACPC,SAAS;oBACTC,aAAa;oBACbC,MAAM;oBACNb,aAAa;gBACf;YACF,KAAK;gBACH,OAAO;oBACLQ,MAAMO,iBAAQ;oBACdL,OAAO;oBACPC,SAAS;oBACTC,aAAa;oBACbC,MAAM;oBACNb,aAAa;gBACf;QACJ;IACF;IAEA,MAAMgB,aAAaT;IAEnB,MAAMU,oBAAoB,CAACC;QACzB,MAAMC,MAAM,IAAIC;QAChB,MAAMC,SAASF,IAAIG,OAAO,KAAKJ,KAAKI,OAAO;QAC3C,MAAMC,WAAWC,KAAKC,KAAK,CAACJ,SAAS;QACrC,MAAMK,WAAWF,KAAKC,KAAK,CAACF,WAAW;QACvC,MAAMI,YAAYH,KAAKC,KAAK,CAACC,WAAW;QAExC,IAAIH,WAAW,IAAI,OAAO;QAC1B,IAAIG,WAAW,IAAI,OAAO,CAAC,EAAEA,SAAS,KAAK,CAAC;QAC5C,IAAIC,YAAY,IAAI,OAAO,CAAC,EAAEA,UAAU,KAAK,CAAC;QAC9C,OAAOT,KAAKU,kBAAkB;IAChC;IAEA,qBACE,sBAACC;QAAIzB,WAAW,CAAC,qDAAqD,EAAEA,UAAU,CAAC;;0BAEjF,sBAACyB;gBAAIzB,WAAU;;kCACb,sBAACyB;wBAAIzB,WAAU;;0CACb,sBAACyB;;kDACC,qBAACC;wCAAG1B,WAAU;kDAAuCL;;oCACpDC,6BACC,qBAAC+B;wCAAE3B,WAAU;kDAA8BJ;;;;4BAI9CK,4BACC,sBAACwB;gCAAIzB,WAAU;;oCAEZH,6BACC,sBAAC4B;wCAAIzB,WAAU;;0DACb,qBAAC4B,kBAAS;gDAAC5B,WAAU;;4CACpBa,kBAAkBhB;;;kDAKvB,sBAAC4B;wCAAIzB,WAAW,CAAC;;gBAEf,EAAEY,WAAWL,OAAO,CAAC,CAAC,EAAEK,WAAWJ,WAAW,CAAC;cACjD,CAAC;;0DACC,qBAACI,WAAWR,IAAI;gDAACJ,WAAW,CAAC,aAAa,EAAEY,WAAWN,KAAK,CAAC,CAAC;;0DAC9D,qBAACuB;gDAAK7B,WAAWY,WAAWN,KAAK;0DAAGM,WAAWH,IAAI;;;;;;;;oBAO1DR,cAAeC,CAAAA,qBAAqB,WAAWA,qBAAqB,cAAa,mBAChF,qBAACuB;wBAAIzB,WAAU;kCACb,cAAA,qBAAC2B;4BAAE3B,WAAU;sCAAyBY,WAAWhB,WAAW;;;;;0BAMlE,qBAAC6B;gBAAIzB,WAAU;0BACZD;;;;AAIT"}