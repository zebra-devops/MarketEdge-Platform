{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/market-edge-api.ts"],"sourcesContent":["import { \n  Market, \n  Competitor, \n  PricingData, \n  MarketAlert, \n  MarketOverview,\n  MarketMetrics,\n  CompetitorAnalysis,\n  CompetitorComparison,\n  MarketTrends,\n  MarketReport\n} from '@/types/market-edge';\nimport { cinemaDemoData } from './cinema-demo-data';\nimport Cookies from 'js-cookie';\n\nconst API_BASE = 'http://localhost:8000/api/v1/market-edge';\n\nclass MarketEdgeAPI {\n  private isDemoMode: boolean = false;\n\n  // Enable/disable demo mode for cinema presentation\n  setDemoMode(enabled: boolean) {\n    this.isDemoMode = enabled;\n    console.log(`Market Edge API Demo Mode: ${enabled ? 'ENABLED' : 'DISABLED'}`);\n  }\n\n  getDemoMode(): boolean {\n    return this.isDemoMode;\n  }\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<T> {\n    const token = Cookies.get('access_token');\n    \n    // Debug logging\n    console.log('Market Edge API Request:', {\n      endpoint: `${API_BASE}${endpoint}`,\n      hasToken: !!token,\n      token: token ? `${token.substring(0, 20)}...` : 'No token'\n    });\n    \n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : '',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ detail: 'Request failed' }));\n      throw new Error(error.detail || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Market endpoints\n  async getMarkets(): Promise<Market[]> {\n    if (this.isDemoMode) {\n      // Return cinema demo markets with slight delay for realism\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return cinemaDemoData.getMarkets();\n    }\n    return this.request<Market[]>('/markets');\n  }\n\n  async createMarket(marketData: {\n    name: string;\n    geographic_bounds?: Record<string, any>;\n    tracking_config?: Record<string, any>;\n  }): Promise<Market> {\n    return this.request<Market>('/markets', {\n      method: 'POST',\n      body: JSON.stringify(marketData),\n    });\n  }\n\n  async getMarket(marketId: string): Promise<Market> {\n    return this.request<Market>(`/markets/${marketId}`);\n  }\n\n  async updateMarket(\n    marketId: string, \n    marketData: {\n      name: string;\n      geographic_bounds?: Record<string, any>;\n      tracking_config?: Record<string, any>;\n    }\n  ): Promise<Market> {\n    return this.request<Market>(`/markets/${marketId}`, {\n      method: 'PUT',\n      body: JSON.stringify(marketData),\n    });\n  }\n\n  async deleteMarket(marketId: string): Promise<void> {\n    await this.request(`/markets/${marketId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Competitor endpoints\n  async getCompetitors(marketId: string): Promise<Competitor[]> {\n    return this.request<Competitor[]>(`/markets/${marketId}/competitors`);\n  }\n\n  async createCompetitor(competitorData: {\n    name: string;\n    market_id: string;\n    business_type?: string;\n    website?: string;\n    locations?: Record<string, any>;\n    tracking_priority?: number;\n    description?: string;\n    market_share_estimate?: number;\n  }): Promise<Competitor> {\n    return this.request<Competitor>('/competitors', {\n      method: 'POST',\n      body: JSON.stringify(competitorData),\n    });\n  }\n\n  async getCompetitor(competitorId: string): Promise<Competitor> {\n    return this.request<Competitor>(`/competitors/${competitorId}`);\n  }\n\n  async updateCompetitor(\n    competitorId: string,\n    competitorData: {\n      name: string;\n      market_id: string;\n      business_type?: string;\n      website?: string;\n      locations?: Record<string, any>;\n      tracking_priority?: number;\n      description?: string;\n      market_share_estimate?: number;\n    }\n  ): Promise<Competitor> {\n    return this.request<Competitor>(`/competitors/${competitorId}`, {\n      method: 'PUT',\n      body: JSON.stringify(competitorData),\n    });\n  }\n\n  // Pricing data endpoints\n  async createPricingData(pricingData: {\n    competitor_id: string;\n    product_service: string;\n    price_point: number;\n    currency?: string;\n    date_collected: string;\n    source?: string;\n    metadata?: Record<string, any>;\n    is_promotion?: boolean;\n    promotion_details?: string;\n  }): Promise<PricingData> {\n    return this.request<PricingData>('/pricing-data', {\n      method: 'POST',\n      body: JSON.stringify(pricingData),\n    });\n  }\n\n  async getMarketPricingData(\n    marketId: string,\n    options: {\n      competitor_id?: string;\n      product_service?: string;\n      limit?: number;\n    } = {}\n  ): Promise<PricingData[]> {\n    const params = new URLSearchParams();\n    if (options.competitor_id) params.append('competitor_id', options.competitor_id);\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.limit) params.append('limit', options.limit.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<PricingData[]>(`/markets/${marketId}/pricing-data${query}`);\n  }\n\n  // Analysis endpoints\n  async getMarketOverview(marketId: string): Promise<MarketOverview> {\n    if (this.isDemoMode) {\n      // Return cinema demo market overview with delay for realism\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return cinemaDemoData.getMarketOverview();\n    }\n    return this.request<MarketOverview>(`/markets/${marketId}/overview`);\n  }\n\n  async getMarketAnalysis(\n    marketId: string,\n    options: {\n      product_service?: string;\n      days_back?: number;\n    } = {}\n  ): Promise<MarketMetrics> {\n    const params = new URLSearchParams();\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketMetrics>(`/markets/${marketId}/analysis${query}`);\n  }\n\n  async getCompetitorAnalysis(\n    competitorId: string,\n    options: {\n      days_back?: number;\n    } = {}\n  ): Promise<CompetitorAnalysis> {\n    const params = new URLSearchParams();\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<CompetitorAnalysis>(`/competitors/${competitorId}/analysis${query}`);\n  }\n\n  async compareCompetitors(\n    marketId: string,\n    options: {\n      competitor_ids?: string[];\n      product_service?: string;\n    } = {}\n  ): Promise<CompetitorComparison> {\n    if (this.isDemoMode) {\n      // Return cinema competitor comparison with delay for realism\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return cinemaDemoData.getCompetitorComparison();\n    }\n    \n    const params = new URLSearchParams();\n    if (options.competitor_ids) {\n      params.append('competitor_ids', options.competitor_ids.join(','));\n    }\n    if (options.product_service) params.append('product_service', options.product_service);\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<CompetitorComparison>(`/markets/${marketId}/comparison${query}`);\n  }\n\n  async getPricingTrends(\n    marketId: string,\n    options: {\n      competitor_id?: string;\n      product_service?: string;\n      days_back?: number;\n    } = {}\n  ): Promise<MarketTrends> {\n    if (this.isDemoMode) {\n      // Return cinema pricing trends with delay for realism\n      await new Promise(resolve => setTimeout(resolve, 450));\n      return cinemaDemoData.getMarketTrends();\n    }\n    \n    const params = new URLSearchParams();\n    if (options.competitor_id) params.append('competitor_id', options.competitor_id);\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketTrends>(`/markets/${marketId}/trends${query}`);\n  }\n\n  // Alert endpoints\n  async getMarketAlerts(\n    marketId: string,\n    options: {\n      unread_only?: boolean;\n      limit?: number;\n    } = {}\n  ): Promise<MarketAlert[]> {\n    const params = new URLSearchParams();\n    if (options.unread_only) params.append('unread_only', 'true');\n    if (options.limit) params.append('limit', options.limit.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketAlert[]>(`/markets/${marketId}/alerts${query}`);\n  }\n\n  async markAlertRead(alertId: string): Promise<void> {\n    await this.request(`/alerts/${alertId}/mark-read`, {\n      method: 'POST',\n    });\n  }\n\n  // Report endpoints\n  async generateMarketReport(\n    marketId: string,\n    reportType: 'comprehensive' | 'summary' | 'trends' = 'comprehensive'\n  ): Promise<MarketReport> {\n    const params = new URLSearchParams();\n    params.append('report_type', reportType);\n\n    return this.request<MarketReport>(`/markets/${marketId}/report?${params.toString()}`);\n  }\n\n  // Utility methods\n  async searchMarkets(query: string): Promise<Market[]> {\n    const markets = await this.getMarkets();\n    return markets.filter(market => \n      market.name.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n\n  async getMarketSummary(marketId: string) {\n    const [overview, alerts] = await Promise.all([\n      this.getMarketOverview(marketId),\n      this.getMarketAlerts(marketId, { unread_only: true, limit: 5 })\n    ]);\n\n    return {\n      ...overview,\n      unread_alerts: alerts\n    };\n  }\n\n  // Export functionality\n  async exportMarketData(\n    marketId: string,\n    format: 'csv' | 'pdf' = 'csv',\n    options: {\n      include_pricing?: boolean;\n      include_competitors?: boolean;\n      include_trends?: boolean;\n      date_range?: {\n        start: string;\n        end: string;\n      };\n    } = {}\n  ): Promise<Blob> {\n    // This would typically call a dedicated export endpoint\n    // For now, we'll generate the data client-side\n    const overview = await this.getMarketOverview(marketId);\n    \n    if (format === 'csv') {\n      return this.generateCSVExport(overview, options);\n    } else {\n      return this.generatePDFExport(overview, options);\n    }\n  }\n\n  private async generateCSVExport(\n    overview: MarketOverview, \n    options: any\n  ): Promise<Blob> {\n    let csvContent = 'Market Edge Export\\n\\n';\n    \n    // Market info\n    csvContent += `Market,${overview.market.name}\\n`;\n    csvContent += `Competitors,${overview.competitors.length}\\n`;\n    csvContent += `Data Points,${overview.recent_data_points}\\n\\n`;\n    \n    // Competitors\n    if (options.include_competitors !== false) {\n      csvContent += 'Competitor Name,Business Type,Market Share,Tracking Priority\\n';\n      overview.competitors.forEach(comp => {\n        csvContent += `${comp.name},${comp.business_type || ''},${comp.market_share_estimate || ''},${comp.tracking_priority}\\n`;\n      });\n    }\n    \n    return new Blob([csvContent], { type: 'text/csv' });\n  }\n\n  private async generatePDFExport(\n    overview: MarketOverview, \n    options: any\n  ): Promise<Blob> {\n    // This would use a PDF library like jsPDF\n    // For now, return a simple text blob\n    const content = `Market Edge Report - ${overview.market.name}`;\n    return new Blob([content], { type: 'application/pdf' });\n  }\n}\n\nexport const marketEdgeAPI = new MarketEdgeAPI();"],"names":["marketEdgeAPI","API_BASE","MarketEdgeAPI","setDemoMode","enabled","isDemoMode","console","log","getDemoMode","request","endpoint","options","token","Cookies","get","hasToken","substring","response","fetch","headers","ok","error","json","catch","detail","Error","status","getMarkets","Promise","resolve","setTimeout","cinemaDemoData","createMarket","marketData","method","body","JSON","stringify","getMarket","marketId","updateMarket","deleteMarket","getCompetitors","createCompetitor","competitorData","getCompetitor","competitorId","updateCompetitor","createPricingData","pricingData","getMarketPricingData","params","URLSearchParams","competitor_id","append","product_service","limit","toString","query","getMarketOverview","getMarketAnalysis","days_back","getCompetitorAnalysis","compareCompetitors","getCompetitorComparison","competitor_ids","join","getPricingTrends","getMarketTrends","getMarketAlerts","unread_only","markAlertRead","alertId","generateMarketReport","reportType","searchMarkets","markets","filter","market","name","toLowerCase","includes","getMarketSummary","overview","alerts","all","unread_alerts","exportMarketData","format","generateCSVExport","generatePDFExport","csvContent","competitors","length","recent_data_points","include_competitors","forEach","comp","business_type","market_share_estimate","tracking_priority","Blob","type","content"],"mappings":"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"}