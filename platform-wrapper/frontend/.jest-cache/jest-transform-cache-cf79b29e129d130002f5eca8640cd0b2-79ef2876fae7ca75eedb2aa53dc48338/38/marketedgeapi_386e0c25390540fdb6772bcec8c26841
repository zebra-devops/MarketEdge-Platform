e71b6bcea4e8b6f58430fceddb4d0221
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "marketEdgeAPI", {
    enumerable: true,
    get: function() {
        return marketEdgeAPI;
    }
});
const _cinemademodata = require("./cinema-demo-data");
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const API_BASE = "http://localhost:8000/api/v1/market-edge";
class MarketEdgeAPI {
    // Enable/disable demo mode for cinema presentation
    setDemoMode(enabled) {
        this.isDemoMode = enabled;
        console.log(`Market Edge API Demo Mode: ${enabled ? "ENABLED" : "DISABLED"}`);
    }
    getDemoMode() {
        return this.isDemoMode;
    }
    async request(endpoint, options = {}) {
        const token = _jscookie.default.get("access_token");
        // Debug logging
        console.log("Market Edge API Request:", {
            endpoint: `${API_BASE}${endpoint}`,
            hasToken: !!token,
            token: token ? `${token.substring(0, 20)}...` : "No token"
        });
        const response = await fetch(`${API_BASE}${endpoint}`, {
            ...options,
            headers: {
                "Content-Type": "application/json",
                "Authorization": token ? `Bearer ${token}` : "",
                ...options.headers
            }
        });
        if (!response.ok) {
            const error = await response.json().catch(()=>({
                    detail: "Request failed"
                }));
            throw new Error(error.detail || `HTTP ${response.status}`);
        }
        return response.json();
    }
    // Market endpoints
    async getMarkets() {
        if (this.isDemoMode) {
            // Return cinema demo markets with slight delay for realism
            await new Promise((resolve)=>setTimeout(resolve, 300));
            return _cinemademodata.cinemaDemoData.getMarkets();
        }
        return this.request("/markets");
    }
    async createMarket(marketData) {
        return this.request("/markets", {
            method: "POST",
            body: JSON.stringify(marketData)
        });
    }
    async getMarket(marketId) {
        return this.request(`/markets/${marketId}`);
    }
    async updateMarket(marketId, marketData) {
        return this.request(`/markets/${marketId}`, {
            method: "PUT",
            body: JSON.stringify(marketData)
        });
    }
    async deleteMarket(marketId) {
        await this.request(`/markets/${marketId}`, {
            method: "DELETE"
        });
    }
    // Competitor endpoints
    async getCompetitors(marketId) {
        return this.request(`/markets/${marketId}/competitors`);
    }
    async createCompetitor(competitorData) {
        return this.request("/competitors", {
            method: "POST",
            body: JSON.stringify(competitorData)
        });
    }
    async getCompetitor(competitorId) {
        return this.request(`/competitors/${competitorId}`);
    }
    async updateCompetitor(competitorId, competitorData) {
        return this.request(`/competitors/${competitorId}`, {
            method: "PUT",
            body: JSON.stringify(competitorData)
        });
    }
    // Pricing data endpoints
    async createPricingData(pricingData) {
        return this.request("/pricing-data", {
            method: "POST",
            body: JSON.stringify(pricingData)
        });
    }
    async getMarketPricingData(marketId, options = {}) {
        const params = new URLSearchParams();
        if (options.competitor_id) params.append("competitor_id", options.competitor_id);
        if (options.product_service) params.append("product_service", options.product_service);
        if (options.limit) params.append("limit", options.limit.toString());
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/markets/${marketId}/pricing-data${query}`);
    }
    // Analysis endpoints
    async getMarketOverview(marketId) {
        if (this.isDemoMode) {
            // Return cinema demo market overview with delay for realism
            await new Promise((resolve)=>setTimeout(resolve, 500));
            return _cinemademodata.cinemaDemoData.getMarketOverview();
        }
        return this.request(`/markets/${marketId}/overview`);
    }
    async getMarketAnalysis(marketId, options = {}) {
        const params = new URLSearchParams();
        if (options.product_service) params.append("product_service", options.product_service);
        if (options.days_back) params.append("days_back", options.days_back.toString());
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/markets/${marketId}/analysis${query}`);
    }
    async getCompetitorAnalysis(competitorId, options = {}) {
        const params = new URLSearchParams();
        if (options.days_back) params.append("days_back", options.days_back.toString());
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/competitors/${competitorId}/analysis${query}`);
    }
    async compareCompetitors(marketId, options = {}) {
        if (this.isDemoMode) {
            // Return cinema competitor comparison with delay for realism
            await new Promise((resolve)=>setTimeout(resolve, 400));
            return _cinemademodata.cinemaDemoData.getCompetitorComparison();
        }
        const params = new URLSearchParams();
        if (options.competitor_ids) {
            params.append("competitor_ids", options.competitor_ids.join(","));
        }
        if (options.product_service) params.append("product_service", options.product_service);
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/markets/${marketId}/comparison${query}`);
    }
    async getPricingTrends(marketId, options = {}) {
        if (this.isDemoMode) {
            // Return cinema pricing trends with delay for realism
            await new Promise((resolve)=>setTimeout(resolve, 450));
            return _cinemademodata.cinemaDemoData.getMarketTrends();
        }
        const params = new URLSearchParams();
        if (options.competitor_id) params.append("competitor_id", options.competitor_id);
        if (options.product_service) params.append("product_service", options.product_service);
        if (options.days_back) params.append("days_back", options.days_back.toString());
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/markets/${marketId}/trends${query}`);
    }
    // Alert endpoints
    async getMarketAlerts(marketId, options = {}) {
        const params = new URLSearchParams();
        if (options.unread_only) params.append("unread_only", "true");
        if (options.limit) params.append("limit", options.limit.toString());
        const query = params.toString() ? `?${params.toString()}` : "";
        return this.request(`/markets/${marketId}/alerts${query}`);
    }
    async markAlertRead(alertId) {
        await this.request(`/alerts/${alertId}/mark-read`, {
            method: "POST"
        });
    }
    // Report endpoints
    async generateMarketReport(marketId, reportType = "comprehensive") {
        const params = new URLSearchParams();
        params.append("report_type", reportType);
        return this.request(`/markets/${marketId}/report?${params.toString()}`);
    }
    // Utility methods
    async searchMarkets(query) {
        const markets = await this.getMarkets();
        return markets.filter((market)=>market.name.toLowerCase().includes(query.toLowerCase()));
    }
    async getMarketSummary(marketId) {
        const [overview, alerts] = await Promise.all([
            this.getMarketOverview(marketId),
            this.getMarketAlerts(marketId, {
                unread_only: true,
                limit: 5
            })
        ]);
        return {
            ...overview,
            unread_alerts: alerts
        };
    }
    // Export functionality
    async exportMarketData(marketId, format = "csv", options = {}) {
        // This would typically call a dedicated export endpoint
        // For now, we'll generate the data client-side
        const overview = await this.getMarketOverview(marketId);
        if (format === "csv") {
            return this.generateCSVExport(overview, options);
        } else {
            return this.generatePDFExport(overview, options);
        }
    }
    async generateCSVExport(overview, options) {
        let csvContent = "Market Edge Export\n\n";
        // Market info
        csvContent += `Market,${overview.market.name}\n`;
        csvContent += `Competitors,${overview.competitors.length}\n`;
        csvContent += `Data Points,${overview.recent_data_points}\n\n`;
        // Competitors
        if (options.include_competitors !== false) {
            csvContent += "Competitor Name,Business Type,Market Share,Tracking Priority\n";
            overview.competitors.forEach((comp)=>{
                csvContent += `${comp.name},${comp.business_type || ""},${comp.market_share_estimate || ""},${comp.tracking_priority}\n`;
            });
        }
        return new Blob([
            csvContent
        ], {
            type: "text/csv"
        });
    }
    async generatePDFExport(overview, options) {
        // This would use a PDF library like jsPDF
        // For now, return a simple text blob
        const content = `Market Edge Report - ${overview.market.name}`;
        return new Blob([
            content
        ], {
            type: "application/pdf"
        });
    }
    constructor(){
        this.isDemoMode = false;
    }
}
const marketEdgeAPI = new MarketEdgeAPI();

//# sourceMappingURL=data:application/json;base64,