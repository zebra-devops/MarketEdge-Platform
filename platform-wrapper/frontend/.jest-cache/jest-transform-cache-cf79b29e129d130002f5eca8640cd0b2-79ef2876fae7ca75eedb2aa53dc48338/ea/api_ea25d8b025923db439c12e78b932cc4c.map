{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios'\nimport Cookies from 'js-cookie'\nimport { TokenResponse, RefreshTokenRequest } from '@/types/auth'\nimport { Organisation, OrganisationCreate, IndustryOption } from '@/types/api'\n\nclass ApiService {\n  private client: AxiosInstance\n  private currentOrganizationId: string | null = null\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + '/api/v1',\n      timeout: 60000, // 60 second timeout to handle Render cold starts\n      withCredentials: true, // Include cookies for cross-origin requests\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    this.setupInterceptors()\n  }\n\n  setOrganizationContext(organizationId: string) {\n    this.currentOrganizationId = organizationId\n  }\n\n  clearOrganizationContext() {\n    this.currentOrganizationId = null\n  }\n\n  private setupInterceptors() {\n    this.client.interceptors.request.use(\n      (config) => {\n        // FIXED: Enhanced token retrieval prioritizing localStorage for local dev\n        let token = localStorage.getItem('access_token')\n        if (!token) {\n          token = Cookies.get('access_token')\n        }\n        \n        // DEBUG: Enhanced logging for better troubleshooting\n        const isAuthRequest = config.url?.includes('/auth/')\n        const requiresAuth = !isAuthRequest && !config.url?.includes('/health') && !config.url?.includes('/cors-debug')\n        \n        console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`)\n        console.log(`Token available: ${token ? 'YES (length: ' + token.length + ')' : 'NO'}`)\n        \n        if (!token && requiresAuth) {\n          console.log('⚠️  No access token for protected endpoint - request may fail with 403/401')\n          console.log('   Cookie token:', Cookies.get('access_token') ? 'EXISTS' : 'MISSING')\n          console.log('   LocalStorage token:', localStorage.getItem('access_token') ? 'EXISTS' : 'MISSING')\n          console.log('   Suggestion: Check authentication state or login again')\n        } else if (token) {\n          console.log('✅ Token found and will be included in request')\n        }\n        \n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        } else if (requiresAuth) {\n          // FIXED: For protected endpoints without token, add debug info\n          console.warn('Making request to protected endpoint without token:', config.url)\n        }\n        \n        // Add organization context header if set\n        if (this.currentOrganizationId) {\n          config.headers['X-Organization-ID'] = this.currentOrganizationId\n        }\n        \n        return config\n      },\n      (error) => Promise.reject(error)\n    )\n\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        // PRODUCTION DEBUG: Log response errors for troubleshooting\n        if (process.env.NODE_ENV === 'production') {\n          console.log(`API Error: ${error.response?.status} ${error.response?.statusText}`)\n          console.log(`URL: ${error.config?.url}`)\n          console.log(`Response: ${error.response?.data ? JSON.stringify(error.response.data).substring(0, 200) : 'No response data'}`)\n        }\n        const originalRequest = error.config\n\n        // Handle specific error cases that should not trigger retries\n        if (error?.message?.includes('ERR_INSUFFICIENT_RESOURCES') || \n            error?.code === 'ERR_INSUFFICIENT_RESOURCES') {\n          console.error('Network resource exhaustion detected:', error)\n          return Promise.reject(new Error('Server overloaded. Please wait and try again.'))\n        }\n\n        // Handle rate limiting\n        if (error.response?.status === 429) {\n          console.error('Rate limit exceeded:', error)\n          return Promise.reject(new Error('Too many requests. Please wait and try again.'))\n        }\n\n        // Handle 401 with token refresh (but prevent infinite loops)\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true\n\n          try {\n            // FIXED: Prioritize localStorage for refresh token in local dev\n            let refreshToken = localStorage.getItem('refresh_token')\n            if (!refreshToken) {\n              refreshToken = Cookies.get('refresh_token')\n            }\n            \n            if (refreshToken) {\n              const response = await this.refreshToken({ refresh_token: refreshToken })\n              Cookies.set('access_token', response.access_token)\n              originalRequest.headers.Authorization = `Bearer ${response.access_token}`\n              return this.client(originalRequest)\n            }\n          } catch (refreshError) {\n            console.error('Token refresh failed during 401 handling:', refreshError)\n            this.clearTokens()\n            // Prevent multiple redirects by checking current location\n            if (typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {\n              window.location.href = '/login'\n            }\n          }\n        }\n\n        // Handle network errors with better messaging\n        if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n          console.error('Request timeout:', error)\n          return Promise.reject(new Error('Request timeout: Backend may be starting up (cold start). Please wait a moment and try again.'))\n        }\n\n        if (error.code === 'ERR_NETWORK') {\n          console.error('Network error:', error)\n          return Promise.reject(new Error('Network error. Please check your connection.'))\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  private clearTokens() {\n    Cookies.remove('access_token')\n    Cookies.remove('refresh_token')\n    localStorage.removeItem('access_token')\n    localStorage.removeItem('refresh_token')\n  }\n\n  async get<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.get(url)\n    return response.data\n  }\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.post(url, data)\n    return response.data\n  }\n\n  async put<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.put(url, data)\n    return response.data\n  }\n\n  async delete<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.delete(url)\n    return response.data\n  }\n\n  async refreshToken(data: RefreshTokenRequest): Promise<{ access_token: string; token_type: string }> {\n    const response = await axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`,\n      data,\n      {\n        withCredentials: true // Include cookies for refresh token request\n      }\n    )\n    return response.data\n  }\n\n  // Organisation Management Methods\n  async createOrganisation(data: OrganisationCreate): Promise<Organisation> {\n    return this.post<Organisation>('/organisations', data)\n  }\n\n  async getAllOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations')\n  }\n\n  async getCurrentOrganisation(): Promise<Organisation> {\n    return this.get<Organisation>('/organisations/current')\n  }\n\n  async updateCurrentOrganisation(data: Partial<OrganisationCreate>): Promise<Organisation> {\n    return this.put<Organisation>('/organisations/current', data)\n  }\n\n  async updateOrganisation(id: string, data: Partial<OrganisationCreate>): Promise<Organisation> {\n    return this.put<Organisation>(`/organisations/${id}`, data)\n  }\n\n  async getAvailableIndustries(): Promise<IndustryOption[]> {\n    return this.get<IndustryOption[]>('/organisations/industries')\n  }\n\n  async getOrganisationStats(): Promise<Record<string, any>> {\n    return this.get<Record<string, any>>('/organisations/stats')\n  }\n\n  // Organization Switching Methods\n  async getUserAccessibleOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations/accessible')\n  }\n\n  async logOrganizationSwitch(organizationId: string): Promise<void> {\n    return this.post<void>('/audit/organization-switch', { \n      organization_id: organizationId,\n      timestamp: new Date().toISOString(),\n      user_agent: navigator.userAgent\n    })\n  }\n}\n\nexport const apiService = new ApiService()"],"names":["apiService","ApiService","constructor","currentOrganizationId","client","axios","create","baseURL","process","env","NEXT_PUBLIC_API_BASE_URL","timeout","withCredentials","headers","setupInterceptors","setOrganizationContext","organizationId","clearOrganizationContext","interceptors","request","use","config","token","localStorage","getItem","Cookies","get","isAuthRequest","url","includes","requiresAuth","console","log","method","toUpperCase","length","Authorization","warn","error","Promise","reject","response","NODE_ENV","status","statusText","data","JSON","stringify","substring","originalRequest","message","code","Error","_retry","refreshToken","refresh_token","set","access_token","refreshError","clearTokens","window","location","pathname","href","remove","removeItem","post","put","delete","createOrganisation","getAllOrganisations","getCurrentOrganisation","updateCurrentOrganisation","updateOrganisation","id","getAvailableIndustries","getOrganisationStats","getUserAccessibleOrganisations","logOrganizationSwitch","organization_id","timestamp","Date","toISOString","user_agent","navigator","userAgent"],"mappings":"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"}