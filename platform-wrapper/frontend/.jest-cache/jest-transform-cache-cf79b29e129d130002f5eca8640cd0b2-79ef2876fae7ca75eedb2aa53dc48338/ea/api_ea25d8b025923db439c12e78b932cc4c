31893937bf9714953088e4b101682115
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "apiService", {
    enumerable: true,
    get: function() {
        return apiService;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ApiService {
    constructor(){
        this.currentOrganizationId = null;
        this.client = _axios.default.create({
            baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + "/api/v1",
            timeout: 60000,
            withCredentials: true,
            headers: {
                "Content-Type": "application/json"
            }
        });
        this.setupInterceptors();
    }
    setOrganizationContext(organizationId) {
        this.currentOrganizationId = organizationId;
    }
    clearOrganizationContext() {
        this.currentOrganizationId = null;
    }
    setupInterceptors() {
        this.client.interceptors.request.use((config)=>{
            // FIXED: Enhanced token retrieval prioritizing localStorage for local dev
            let token = localStorage.getItem("access_token");
            if (!token) {
                token = _jscookie.default.get("access_token");
            }
            // DEBUG: Enhanced logging for better troubleshooting
            const isAuthRequest = config.url?.includes("/auth/");
            const requiresAuth = !isAuthRequest && !config.url?.includes("/health") && !config.url?.includes("/cors-debug");
            console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);
            console.log(`Token available: ${token ? "YES (length: " + token.length + ")" : "NO"}`);
            if (!token && requiresAuth) {
                console.log("⚠️  No access token for protected endpoint - request may fail with 403/401");
                console.log("   Cookie token:", _jscookie.default.get("access_token") ? "EXISTS" : "MISSING");
                console.log("   LocalStorage token:", localStorage.getItem("access_token") ? "EXISTS" : "MISSING");
                console.log("   Suggestion: Check authentication state or login again");
            } else if (token) {
                console.log("✅ Token found and will be included in request");
            }
            if (token) {
                config.headers.Authorization = `Bearer ${token}`;
            } else if (requiresAuth) {
                // FIXED: For protected endpoints without token, add debug info
                console.warn("Making request to protected endpoint without token:", config.url);
            }
            // Add organization context header if set
            if (this.currentOrganizationId) {
                config.headers["X-Organization-ID"] = this.currentOrganizationId;
            }
            return config;
        }, (error)=>Promise.reject(error));
        this.client.interceptors.response.use((response)=>response, async (error)=>{
            // PRODUCTION DEBUG: Log response errors for troubleshooting
            if (process.env.NODE_ENV === "production") {
                console.log(`API Error: ${error.response?.status} ${error.response?.statusText}`);
                console.log(`URL: ${error.config?.url}`);
                console.log(`Response: ${error.response?.data ? JSON.stringify(error.response.data).substring(0, 200) : "No response data"}`);
            }
            const originalRequest = error.config;
            // Handle specific error cases that should not trigger retries
            if (error?.message?.includes("ERR_INSUFFICIENT_RESOURCES") || error?.code === "ERR_INSUFFICIENT_RESOURCES") {
                console.error("Network resource exhaustion detected:", error);
                return Promise.reject(new Error("Server overloaded. Please wait and try again."));
            }
            // Handle rate limiting
            if (error.response?.status === 429) {
                console.error("Rate limit exceeded:", error);
                return Promise.reject(new Error("Too many requests. Please wait and try again."));
            }
            // Handle 401 with token refresh (but prevent infinite loops)
            if (error.response?.status === 401 && !originalRequest._retry) {
                originalRequest._retry = true;
                try {
                    // FIXED: Prioritize localStorage for refresh token in local dev
                    let refreshToken = localStorage.getItem("refresh_token");
                    if (!refreshToken) {
                        refreshToken = _jscookie.default.get("refresh_token");
                    }
                    if (refreshToken) {
                        const response = await this.refreshToken({
                            refresh_token: refreshToken
                        });
                        _jscookie.default.set("access_token", response.access_token);
                        originalRequest.headers.Authorization = `Bearer ${response.access_token}`;
                        return this.client(originalRequest);
                    }
                } catch (refreshError) {
                    console.error("Token refresh failed during 401 handling:", refreshError);
                    this.clearTokens();
                    // Prevent multiple redirects by checking current location
                    if (typeof window !== "undefined" && !window.location.pathname.includes("/login")) {
                        window.location.href = "/login";
                    }
                }
            }
            // Handle network errors with better messaging
            if (error.code === "ECONNABORTED" || error.message.includes("timeout")) {
                console.error("Request timeout:", error);
                return Promise.reject(new Error("Request timeout: Backend may be starting up (cold start). Please wait a moment and try again."));
            }
            if (error.code === "ERR_NETWORK") {
                console.error("Network error:", error);
                return Promise.reject(new Error("Network error. Please check your connection."));
            }
            return Promise.reject(error);
        });
    }
    clearTokens() {
        _jscookie.default.remove("access_token");
        _jscookie.default.remove("refresh_token");
        localStorage.removeItem("access_token");
        localStorage.removeItem("refresh_token");
    }
    async get(url) {
        const response = await this.client.get(url);
        return response.data;
    }
    async post(url, data) {
        const response = await this.client.post(url, data);
        return response.data;
    }
    async put(url, data) {
        const response = await this.client.put(url, data);
        return response.data;
    }
    async delete(url) {
        const response = await this.client.delete(url);
        return response.data;
    }
    async refreshToken(data) {
        const response = await _axios.default.post(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`, data, {
            withCredentials: true // Include cookies for refresh token request
        });
        return response.data;
    }
    // Organisation Management Methods
    async createOrganisation(data) {
        return this.post("/organisations", data);
    }
    async getAllOrganisations() {
        return this.get("/organisations");
    }
    async getCurrentOrganisation() {
        return this.get("/organisations/current");
    }
    async updateCurrentOrganisation(data) {
        return this.put("/organisations/current", data);
    }
    async updateOrganisation(id, data) {
        return this.put(`/organisations/${id}`, data);
    }
    async getAvailableIndustries() {
        return this.get("/organisations/industries");
    }
    async getOrganisationStats() {
        return this.get("/organisations/stats");
    }
    // Organization Switching Methods
    async getUserAccessibleOrganisations() {
        return this.get("/organisations/accessible");
    }
    async logOrganizationSwitch(organizationId) {
        return this.post("/audit/organization-switch", {
            organization_id: organizationId,
            timestamp: new Date().toISOString(),
            user_agent: navigator.userAgent
        });
    }
}
const apiService = new ApiService();

//# sourceMappingURL=data:application/json;base64,