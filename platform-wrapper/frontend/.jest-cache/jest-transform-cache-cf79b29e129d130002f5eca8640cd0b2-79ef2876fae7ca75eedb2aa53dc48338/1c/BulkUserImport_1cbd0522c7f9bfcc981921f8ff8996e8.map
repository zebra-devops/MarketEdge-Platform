{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/admin/BulkUserImport.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useRef, useCallback, useEffect } from 'react'\nimport { useAuthContext } from '@/hooks/useAuth'\nimport { useOrganisationContext } from '@/components/providers/OrganisationProvider'\nimport { apiService } from '@/services/api'\nimport Button from '@/components/ui/Button'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner'\nimport Modal from '@/components/ui/Modal'\nimport toast from 'react-hot-toast'\nimport { \n  DocumentArrowUpIcon,\n  DocumentArrowDownIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  ArrowPathIcon,\n  EyeIcon,\n  PlayIcon\n} from '@heroicons/react/24/outline'\n\ninterface ImportPreviewData {\n  email: string\n  first_name: string\n  last_name: string\n  role: string\n  department?: string\n  location?: string\n  phone?: string\n  applications: {\n    market_edge: boolean\n    causal_edge: boolean\n    value_edge: boolean\n  }\n}\n\ninterface ImportError {\n  row: number\n  field: string\n  message: string\n  value?: string\n}\n\ninterface ImportDuplicate {\n  row: number\n  email: string\n  message: string\n  existing_user_id?: string\n}\n\ninterface ImportPreviewResponse {\n  is_valid: boolean\n  total_rows: number\n  valid_rows: number\n  error_count: number\n  duplicate_count: number\n  warning_count: number\n  errors: ImportError[]\n  duplicates: ImportDuplicate[]\n  warnings: any[]\n  preview_data: ImportPreviewData[]\n}\n\ninterface ImportBatchResponse {\n  id: string\n  filename: string\n  status: string\n  total_rows: number\n  processed_rows: number\n  successful_rows: number\n  failed_rows: number\n  created_at: string\n  started_at?: string\n  completed_at?: string\n  error_message?: string\n}\n\ninterface BulkUserImportProps {\n  organisationId: string\n  onImportComplete?: () => void\n}\n\n// Sanitize user input to prevent XSS attacks\nconst sanitizeHTML = (str: string): string => {\n  if (!str) return ''\n  const div = document.createElement('div')\n  div.textContent = str\n  return div.innerHTML\n}\n\nexport default function BulkUserImport({ organisationId, onImportComplete }: BulkUserImportProps) {\n  const { user: currentUser } = useAuthContext()\n  const { allOrganisations } = useOrganisationContext()\n  \n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [isValidating, setIsValidating] = useState(false)\n  const [isUploading, setIsUploading] = useState(false)\n  const [previewData, setPreviewData] = useState<ImportPreviewResponse | null>(null)\n  const [importBatch, setImportBatch] = useState<ImportBatchResponse | null>(null)\n  const [sendInvitations, setSendInvitations] = useState(true)\n  const [skipDuplicates, setSkipDuplicates] = useState(true)\n  const [showPreview, setShowPreview] = useState(false)\n  const [showErrors, setShowErrors] = useState(false)\n  \n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  const currentOrg = allOrganisations?.find(org => org.id === organisationId)\n\n  // Cleanup polling interval on unmount\n  useEffect(() => {\n    return () => {\n      if (pollIntervalRef.current) {\n        clearInterval(pollIntervalRef.current)\n        pollIntervalRef.current = null\n      }\n    }\n  }, [])\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      if (!file.name.endsWith('.csv')) {\n        toast.error('Please select a CSV file')\n        return\n      }\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast.error('File size must be less than 10MB')\n        return\n      }\n      setSelectedFile(file)\n      setPreviewData(null)\n      setImportBatch(null)\n    }\n  }\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault()\n  }\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault()\n    const file = event.dataTransfer.files[0]\n    if (file) {\n      if (!file.name.endsWith('.csv')) {\n        toast.error('Please select a CSV file')\n        return\n      }\n      setSelectedFile(file)\n      setPreviewData(null)\n      setImportBatch(null)\n    }\n  }\n\n  const downloadTemplate = async () => {\n    try {\n      const response = await fetch(`/api/v1/organizations/${organisationId}/users/import/template`, {\n        headers: {\n          'Authorization': `Bearer ${currentUser?.access_token}`,\n        },\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to download template')\n      }\n      \n      const blob = await response.blob()\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = 'user_import_template.csv'\n      document.body.appendChild(a)\n      a.click()\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(a)\n      \n      toast.success('Template downloaded successfully')\n    } catch (error) {\n      console.error('Failed to download template:', error)\n      toast.error('Failed to download template')\n    }\n  }\n\n  const validateFile = async () => {\n    if (!selectedFile) return\n    \n    try {\n      setIsValidating(true)\n      \n      const formData = new FormData()\n      formData.append('file', selectedFile)\n      \n      const response = await fetch(`/api/v1/organizations/${organisationId}/users/import/preview`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${currentUser?.access_token}`,\n        },\n        body: formData,\n      })\n      \n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.detail || 'Validation failed')\n      }\n      \n      const validationResult: ImportPreviewResponse = await response.json()\n      setPreviewData(validationResult)\n      \n      if (validationResult.is_valid) {\n        toast.success(`File validated successfully! ${validationResult.valid_rows} users ready for import`)\n      } else {\n        toast.error(`Validation failed with ${validationResult.error_count} errors`)\n      }\n    } catch (error: any) {\n      console.error('Validation failed:', error)\n      toast.error(error.message || 'File validation failed')\n    } finally {\n      setIsValidating(false)\n    }\n  }\n\n  const executeImport = async () => {\n    if (!selectedFile || !previewData?.is_valid) return\n    \n    try {\n      setIsUploading(true)\n      \n      const formData = new FormData()\n      formData.append('file', selectedFile)\n      \n      const importRequest = {\n        send_invitations: sendInvitations,\n        skip_duplicates: skipDuplicates,\n        default_role: 'viewer'\n      }\n      \n      const response = await fetch(`/api/v1/organizations/${organisationId}/users/import?${new URLSearchParams({\n        send_invitations: sendInvitations.toString(),\n        skip_duplicates: skipDuplicates.toString(),\n      })}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${currentUser?.access_token}`,\n        },\n        body: formData,\n      })\n      \n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.detail || 'Import failed')\n      }\n      \n      const batchResult: ImportBatchResponse = await response.json()\n      setImportBatch(batchResult)\n      \n      toast.success('Import started! Processing in background...')\n      \n      // Start polling for progress\n      startProgressPolling(batchResult.id)\n      \n    } catch (error: any) {\n      console.error('Import failed:', error)\n      toast.error(error.message || 'Import failed')\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const startProgressPolling = (batchId: string) => {\n    pollIntervalRef.current = setInterval(async () => {\n      try {\n        const response = await apiService.get<ImportBatchResponse>(\n          `/organizations/${organisationId}/users/import/${batchId}`\n        )\n        setImportBatch(response)\n        \n        if (response.status === 'completed' || response.status === 'failed') {\n          if (pollIntervalRef.current) {\n            clearInterval(pollIntervalRef.current)\n            pollIntervalRef.current = null\n          }\n          \n          if (response.status === 'completed') {\n            toast.success(`Import completed! ${response.successful_rows} users created successfully`)\n            if (onImportComplete) {\n              onImportComplete()\n            }\n          } else {\n            toast.error(`Import failed: ${response.error_message}`)\n          }\n        }\n      } catch (error) {\n        console.error('Failed to poll import status:', error)\n      }\n    }, 2000) // Poll every 2 seconds\n  }\n\n  const resetForm = () => {\n    setSelectedFile(null)\n    setPreviewData(null)\n    setImportBatch(null)\n    setShowPreview(false)\n    setShowErrors(false)\n    if (fileInputRef.current) {\n      fileInputRef.current.value = ''\n    }\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current)\n      pollIntervalRef.current = null\n    }\n  }\n\n  const handleClose = () => {\n    resetForm()\n    setIsOpen(false)\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />\n      case 'failed':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />\n      case 'processing':\n        return <ArrowPathIcon className=\"h-5 w-5 text-blue-500 animate-spin\" />\n      default:\n        return <ArrowPathIcon className=\"h-5 w-5 text-gray-500\" />\n    }\n  }\n\n  const getProgressPercentage = () => {\n    if (!importBatch || importBatch.total_rows === 0) return 0\n    return Math.round((importBatch.processed_rows / importBatch.total_rows) * 100)\n  }\n\n  return (\n    <>\n      <Button\n        onClick={() => setIsOpen(true)}\n        variant=\"secondary\"\n        className=\"flex items-center gap-2\"\n      >\n        <DocumentArrowUpIcon className=\"h-5 w-5\" />\n        CSV Import\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        onClose={handleClose}\n        title=\"Bulk User Import via CSV\"\n        maxWidth=\"4xl\"\n      >\n        <div className=\"space-y-6\">\n          {/* Header Info */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <CheckCircleIcon className=\"h-5 w-5 text-blue-400\" />\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-blue-800\">\n                  Importing to: {currentOrg?.name}\n                </h3>\n                <div className=\"mt-2 text-sm text-blue-700\">\n                  <p>Upload a CSV file to bulk import users. Download the template to see the required format.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Download Template */}\n          <div className=\"flex justify-between items-center\">\n            <Button\n              onClick={downloadTemplate}\n              variant=\"secondary\"\n              className=\"flex items-center gap-2\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4\" />\n              Download Template\n            </Button>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"send_invitations\"\n                  checked={sendInvitations}\n                  onChange={(e) => setSendInvitations(e.target.checked)}\n                  className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"send_invitations\" className=\"ml-2 text-sm text-gray-700\">\n                  Send invitation emails\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"skip_duplicates\"\n                  checked={skipDuplicates}\n                  onChange={(e) => setSkipDuplicates(e.target.checked)}\n                  className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"skip_duplicates\" className=\"ml-2 text-sm text-gray-700\">\n                  Skip duplicate emails\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* File Upload Area */}\n          {!importBatch && (\n            <div\n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors\"\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n            >\n              <DocumentArrowUpIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <div className=\"mt-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Drag and drop your CSV file here, or\n                </p>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  variant=\"secondary\"\n                  className=\"mt-2\"\n                >\n                  Choose File\n                </Button>\n              </div>\n              {selectedFile && (\n                <div className=\"mt-4 text-sm text-gray-500\">\n                  Selected: {selectedFile.name} ({Math.round(selectedFile.size / 1024)} KB)\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* File Actions */}\n          {selectedFile && !importBatch && (\n            <div className=\"flex justify-center space-x-3\">\n              <Button\n                onClick={validateFile}\n                isLoading={isValidating}\n                variant=\"secondary\"\n                disabled={!selectedFile}\n              >\n                <EyeIcon className=\"h-4 w-4 mr-2\" />\n                Validate & Preview\n              </Button>\n              \n              {previewData?.is_valid && (\n                <Button\n                  onClick={executeImport}\n                  isLoading={isUploading}\n                  className=\"bg-indigo-600 hover:bg-indigo-700 text-white\"\n                >\n                  <PlayIcon className=\"h-4 w-4 mr-2\" />\n                  Import {previewData.valid_rows} Users\n                </Button>\n              )}\n            </div>\n          )}\n\n          {/* Preview Data */}\n          {previewData && (\n            <div className=\"space-y-4\">\n              {/* Validation Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"bg-blue-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{previewData.total_rows}</div>\n                  <div className=\"text-sm text-blue-700\">Total Rows</div>\n                </div>\n                <div className=\"bg-green-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{previewData.valid_rows}</div>\n                  <div className=\"text-sm text-green-700\">Valid Users</div>\n                </div>\n                <div className=\"bg-red-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">{previewData.error_count}</div>\n                  <div className=\"text-sm text-red-700\">Errors</div>\n                </div>\n                <div className=\"bg-yellow-50 p-3 rounded-lg text-center\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">{previewData.duplicate_count}</div>\n                  <div className=\"text-sm text-yellow-700\">Duplicates</div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-center space-x-3\">\n                {previewData.preview_data.length > 0 && (\n                  <Button\n                    onClick={() => setShowPreview(!showPreview)}\n                    variant=\"secondary\"\n                  >\n                    {showPreview ? 'Hide' : 'Show'} Preview\n                  </Button>\n                )}\n                {(previewData.errors.length > 0 || previewData.duplicates.length > 0) && (\n                  <Button\n                    onClick={() => setShowErrors(!showErrors)}\n                    variant=\"secondary\"\n                  >\n                    {showErrors ? 'Hide' : 'Show'} Issues\n                  </Button>\n                )}\n              </div>\n\n              {/* Preview Table */}\n              {showPreview && previewData.preview_data.length > 0 && (\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <div className=\"bg-gray-50 px-4 py-2 border-b\">\n                    <h4 className=\"font-medium text-gray-900\">Preview (First 10 users)</h4>\n                  </div>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full divide-y divide-gray-200\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Email</th>\n                          <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\n                          <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Role</th>\n                          <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Department</th>\n                          <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Applications</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {previewData.preview_data.map((user, index) => (\n                          <tr key={index}>\n                            <td className=\"px-4 py-2 text-sm text-gray-900\">{user.email}</td>\n                            <td className=\"px-4 py-2 text-sm text-gray-900\">\n                              {user.first_name} {user.last_name}\n                            </td>\n                            <td className=\"px-4 py-2 text-sm\">\n                              <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800\">\n                                {user.role}\n                              </span>\n                            </td>\n                            <td className=\"px-4 py-2 text-sm text-gray-500\">{user.department || '-'}</td>\n                            <td className=\"px-4 py-2 text-sm\">\n                              <div className=\"flex space-x-1\">\n                                {user.applications.market_edge && (\n                                  <span className=\"inline-flex px-1 py-0.5 text-xs bg-green-100 text-green-800 rounded\">ME</span>\n                                )}\n                                {user.applications.causal_edge && (\n                                  <span className=\"inline-flex px-1 py-0.5 text-xs bg-blue-100 text-blue-800 rounded\">CE</span>\n                                )}\n                                {user.applications.value_edge && (\n                                  <span className=\"inline-flex px-1 py-0.5 text-xs bg-purple-100 text-purple-800 rounded\">VE</span>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {/* Errors and Duplicates */}\n              {showErrors && (previewData.errors.length > 0 || previewData.duplicates.length > 0) && (\n                <div className=\"space-y-4\">\n                  {previewData.errors.length > 0 && (\n                    <div className=\"border border-red-200 rounded-lg\">\n                      <div className=\"bg-red-50 px-4 py-2 border-b border-red-200\">\n                        <h4 className=\"font-medium text-red-900\">Validation Errors ({previewData.errors.length})</h4>\n                      </div>\n                      <div className=\"max-h-40 overflow-y-auto\">\n                        {previewData.errors.map((error, index) => (\n                          <div key={index} className=\"px-4 py-2 border-b border-red-100 last:border-b-0\">\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium text-red-900\">Row {error.row}:</span>\n                              <span className=\"text-red-700 ml-2\">{sanitizeHTML(error.message)}</span>\n                              {error.field && (\n                                <span className=\"text-red-600 ml-2\">({sanitizeHTML(error.field)})</span>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {previewData.duplicates.length > 0 && (\n                    <div className=\"border border-yellow-200 rounded-lg\">\n                      <div className=\"bg-yellow-50 px-4 py-2 border-b border-yellow-200\">\n                        <h4 className=\"font-medium text-yellow-900\">Duplicate Emails ({previewData.duplicates.length})</h4>\n                      </div>\n                      <div className=\"max-h-40 overflow-y-auto\">\n                        {previewData.duplicates.map((duplicate, index) => (\n                          <div key={index} className=\"px-4 py-2 border-b border-yellow-100 last:border-b-0\">\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium text-yellow-900\">Row {duplicate.row}:</span>\n                              <span className=\"text-yellow-700 ml-2\">{sanitizeHTML(duplicate.email)}</span>\n                              <span className=\"text-yellow-600 ml-2\">- {sanitizeHTML(duplicate.message)}</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Import Progress */}\n          {importBatch && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-white border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(importBatch.status)}\n                    <h4 className=\"font-medium text-gray-900\">Import Progress</h4>\n                  </div>\n                  <span className=\"text-sm text-gray-500 capitalize\">{importBatch.status}</span>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\n                    <span>Progress</span>\n                    <span>{getProgressPercentage()}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${getProgressPercentage()}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Statistics */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-lg font-semibold text-gray-900\">{importBatch.total_rows}</div>\n                    <div className=\"text-sm text-gray-500\">Total</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold text-green-600\">{importBatch.successful_rows}</div>\n                    <div className=\"text-sm text-gray-500\">Success</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold text-red-600\">{importBatch.failed_rows}</div>\n                    <div className=\"text-sm text-gray-500\">Failed</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold text-blue-600\">{importBatch.processed_rows}</div>\n                    <div className=\"text-sm text-gray-500\">Processed</div>\n                  </div>\n                </div>\n\n                {importBatch.error_message && (\n                  <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n                    <p className=\"text-sm text-red-700\">{importBatch.error_message}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Footer Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n            {importBatch?.status === 'completed' || importBatch?.status === 'failed' ? (\n              <Button\n                onClick={resetForm}\n                className=\"bg-indigo-600 hover:bg-indigo-700 text-white\"\n              >\n                Import Another File\n              </Button>\n            ) : null}\n            <Button\n              onClick={handleClose}\n              variant=\"secondary\"\n            >\n              {importBatch ? 'Close' : 'Cancel'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  )\n}"],"names":["BulkUserImport","sanitizeHTML","str","div","document","createElement","textContent","innerHTML","organisationId","onImportComplete","user","currentUser","useAuthContext","allOrganisations","useOrganisationContext","isOpen","setIsOpen","useState","selectedFile","setSelectedFile","isValidating","setIsValidating","isUploading","setIsUploading","previewData","setPreviewData","importBatch","setImportBatch","sendInvitations","setSendInvitations","skipDuplicates","setSkipDuplicates","showPreview","setShowPreview","showErrors","setShowErrors","fileInputRef","useRef","pollIntervalRef","currentOrg","find","org","id","useEffect","current","clearInterval","handleFileSelect","event","file","target","files","name","endsWith","toast","error","size","handleDragOver","preventDefault","handleDrop","dataTransfer","downloadTemplate","response","fetch","headers","access_token","ok","Error","blob","url","window","URL","createObjectURL","a","href","download","body","appendChild","click","revokeObjectURL","removeChild","success","console","validateFile","formData","FormData","append","method","errorData","json","detail","validationResult","is_valid","valid_rows","error_count","message","executeImport","importRequest","send_invitations","skip_duplicates","default_role","URLSearchParams","toString","batchResult","startProgressPolling","batchId","setInterval","apiService","get","status","successful_rows","error_message","resetForm","value","handleClose","getStatusIcon","CheckCircleIcon","className","XCircleIcon","ArrowPathIcon","getProgressPercentage","total_rows","Math","round","processed_rows","Button","onClick","variant","DocumentArrowUpIcon","Modal","onClose","title","maxWidth","h3","p","DocumentArrowDownIcon","input","type","checked","onChange","e","label","htmlFor","onDragOver","onDrop","ref","accept","isLoading","disabled","EyeIcon","PlayIcon","duplicate_count","preview_data","length","errors","duplicates","h4","table","thead","tr","th","tbody","map","index","td","email","first_name","last_name","span","role","department","applications","market_edge","causal_edge","value_edge","row","field","duplicate","style","width","failed_rows"],"mappings":"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"}