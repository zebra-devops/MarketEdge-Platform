4bbac0fddc13c1ccbae2595cfcf8a2db
"use strict";
// Mock the dependencies
jest.mock("../useAuth");
jest.mock("@/services/feature-flag-api");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("react-query");
const _useFeatureFlags = require("../useFeatureFlags");
const _featureflagapi = require("../../services/feature-flag-api");
const _useAuth = require("../useAuth");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockedUseAuth = _useAuth.useAuth;
const mockedApiService = _featureflagapi.featureFlagApiService;
// Test wrapper component
const createTestWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                cacheTime: 0
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe("useFeatureFlag", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Default auth mock
        mockedUseAuth.mockReturnValue({
            user: {
                id: "test-user",
                organisation_id: "test-org"
            },
            isAuthenticated: true,
            isLoading: false,
            isInitialized: true
        });
    });
    it("should return flag state when enabled", async ()=>{
        // Mock API response
        mockedApiService.checkFeatureFlag.mockResolvedValue({
            flag_key: "test.flag",
            enabled: true,
            user_id: "test-user",
            config: {
                theme: "dark"
            }
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlag)("test.flag"), {
            wrapper: createTestWrapper()
        });
        // Initially loading
        expect(result.current.isLoading).toBe(true);
        expect(result.current.isEnabled).toBe(false) // fallback value
        ;
        // Wait for API call
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.isEnabled).toBe(true);
        expect(result.current.config).toEqual({
            theme: "dark"
        });
        expect(result.current.error).toBeNull();
    });
    it("should return fallback value when flag is disabled", async ()=>{
        mockedApiService.checkFeatureFlag.mockResolvedValue({
            flag_key: "test.flag",
            enabled: false,
            user_id: "test-user"
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlag)("test.flag", {
                fallbackValue: true
            }), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.isEnabled).toBe(false) // Actual API result overrides fallback
        ;
        expect(result.current.config).toBeNull();
    });
    it("should handle API errors with fallback", async ()=>{
        const error = new Error("API Error");
        mockedApiService.checkFeatureFlag.mockRejectedValue(error);
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlag)("test.flag", {
                fallbackValue: true
            }), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.isEnabled).toBe(true) // Uses fallback
        ;
        expect(result.current.error).toBe(error);
    });
    it("should not make API calls when not authenticated", ()=>{
        mockedUseAuth.mockReturnValue({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            isInitialized: true
        });
        (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlag)("test.flag"), {
            wrapper: createTestWrapper()
        });
        expect(mockedApiService.checkFeatureFlag).not.toHaveBeenCalled();
    });
    it("should refetch when refetch is called", async ()=>{
        mockedApiService.checkFeatureFlag.mockResolvedValue({
            flag_key: "test.flag",
            enabled: true,
            user_id: "test-user"
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlag)("test.flag"), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        // Clear mock calls
        mockedApiService.checkFeatureFlag.mockClear();
        // Trigger refetch
        result.current.refetch();
        await (0, _react1.waitFor)(()=>{
            expect(mockedApiService.checkFeatureFlag).toHaveBeenCalledWith("test.flag");
        });
    });
});
describe("useFeatureFlags", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockedUseAuth.mockReturnValue({
            user: {
                id: "test-user",
                organisation_id: "test-org"
            },
            isAuthenticated: true,
            isLoading: false,
            isInitialized: true
        });
    });
    it("should return multiple flag states", async ()=>{
        const mockResults = {
            "flag.one": {
                flag_key: "flag.one",
                enabled: true,
                user_id: "test-user",
                config: {}
            },
            "flag.two": {
                flag_key: "flag.two",
                enabled: false,
                user_id: "test-user",
                config: {
                    value: 42
                }
            }
        };
        mockedApiService.checkMultipleFlags.mockResolvedValue(mockResults);
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlags)([
                "flag.one",
                "flag.two"
            ]), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.flags).toEqual({
            "flag.one": true,
            "flag.two": false
        });
        expect(result.current.configs).toEqual({
            "flag.one": {},
            "flag.two": {
                value: 42
            }
        });
    });
    it("should use fallback values for missing flags", async ()=>{
        mockedApiService.checkMultipleFlags.mockResolvedValue({});
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlags)([
                "flag.one",
                "flag.two"
            ], {
                fallbackValues: {
                    "flag.one": true,
                    "flag.two": false
                }
            }), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.flags).toEqual({
            "flag.one": true,
            "flag.two": false
        });
    });
    it("should sort flag keys consistently", async ()=>{
        const mockResults = {
            "flag.b": {
                flag_key: "flag.b",
                enabled: true,
                user_id: "test-user"
            },
            "flag.a": {
                flag_key: "flag.a",
                enabled: false,
                user_id: "test-user"
            }
        };
        mockedApiService.checkMultipleFlags.mockResolvedValue(mockResults);
        (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useFeatureFlags)([
                "flag.b",
                "flag.a"
            ]), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(mockedApiService.checkMultipleFlags).toHaveBeenCalledWith([
                "flag.a",
                "flag.b"
            ]);
        });
    });
});
describe("useAllFeatureFlags", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockedUseAuth.mockReturnValue({
            user: {
                id: "test-user",
                organisation_id: "test-org"
            },
            isAuthenticated: true,
            isLoading: false,
            isInitialized: true
        });
    });
    it("should return all enabled features", async ()=>{
        const mockResponse = {
            enabled_features: {
                "feature.one": {
                    name: "Feature One",
                    config: {
                        value: 1
                    },
                    module_id: "module1"
                },
                "feature.two": {
                    name: "Feature Two",
                    config: {},
                    module_id: "module2"
                }
            },
            user_id: "test-user",
            organisation_id: "test-org"
        };
        mockedApiService.getEnabledFeatures.mockResolvedValue(mockResponse);
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useAllFeatureFlags)(), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.allFlags).toEqual({
            "feature.one": {
                enabled: true,
                name: "Feature One",
                config: {
                    value: 1
                },
                module_id: "module1"
            },
            "feature.two": {
                enabled: true,
                name: "Feature Two",
                config: {},
                module_id: "module2"
            }
        });
    });
    it("should filter by module ID when provided", async ()=>{
        mockedApiService.getEnabledFeatures.mockResolvedValue({
            enabled_features: {},
            user_id: "test-user",
            organisation_id: "test-org"
        });
        (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useAllFeatureFlags)("module1"), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(mockedApiService.getEnabledFeatures).toHaveBeenCalledWith("module1");
        });
    });
    it("should handle empty response", async ()=>{
        mockedApiService.getEnabledFeatures.mockResolvedValue({
            enabled_features: {},
            user_id: "test-user",
            organisation_id: "test-org"
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _useFeatureFlags.useAllFeatureFlags)(), {
            wrapper: createTestWrapper()
        });
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.allFlags).toEqual({});
    });
});

//# sourceMappingURL=data:application/json;base64,