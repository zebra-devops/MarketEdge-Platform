013c4a93499a1e0eec93da894dc38578
/**
 * Integration tests for Module-Feature Flag Connection (US-203)
 * Tests the complete integration of modules with feature flags
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("react-query");
const _globals = require("@jest/globals");
const _ModuleDiscovery = require("../../components/admin/ModuleDiscovery");
const _ModuleFlagManager = require("../../components/admin/ModuleFlagManager");
const _EnhancedModuleManager = require("../../components/admin/EnhancedModuleManager");
const _FeatureFlaggedApplicationRegistry = /*#__PURE__*/ _interop_require_default(require("../../components/ui/FeatureFlaggedApplicationRegistry"));
const _useModuleFeatureFlags = require("../../hooks/useModuleFeatureFlags");
const _useModuleFeatureFlag = require("../../hooks/useModuleFeatureFlag");
const _modulefeatureflagapi = require("../../services/module-feature-flag-api");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Test data
const mockModuleWithFlags = {
    module: {
        id: "market-edge",
        name: "Market Edge",
        description: "Market intelligence module",
        version: "1.0.0",
        module_type: "analytics",
        status: "active",
        is_core: false,
        requires_license: false,
        dependencies: [],
        created_at: "2024-01-01T00:00:00Z",
        updated_at: "2024-01-01T00:00:00Z",
        feature_flags: [],
        required_flags: [
            "modules.market_edge.enabled"
        ],
        optional_flags: [
            "modules.market_edge.advanced_analytics"
        ],
        flag_namespace: "modules.market_edge",
        capabilities: []
    },
    enabled_flags: {
        "modules.market_edge.enabled": {
            flag_key: "modules.market_edge.enabled",
            enabled: true,
            config: {},
            inherited_from: "global"
        },
        "modules.market_edge.advanced_analytics": {
            flag_key: "modules.market_edge.advanced_analytics",
            enabled: false,
            config: {},
            inherited_from: "module"
        }
    },
    available_capabilities: [
        "basic_analytics",
        "competitor_tracking"
    ],
    disabled_capabilities: [
        "advanced_analytics"
    ],
    health_status: "healthy"
};
const mockDiscoveryResponse = {
    enabled_modules: [
        {
            module_id: "market-edge",
            name: "Market Edge",
            version: "1.0.0",
            status: "active",
            capabilities: [
                "basic_analytics",
                "competitor_tracking"
            ],
            feature_flags: {
                "modules.market_edge.enabled": true,
                "modules.market_edge.advanced_analytics": false
            },
            config: {
                "api_endpoint": "https://api.marketedge.com",
                "refresh_interval": 30000
            },
            health: "healthy"
        }
    ],
    disabled_modules: [
        {
            module_id: "causal-edge",
            name: "Causal Edge",
            reason: "Missing required flags",
            missing_flags: [
                "modules.causal_edge.enabled"
            ],
            can_enable: true
        }
    ],
    total_available: 3,
    user_accessible: 1
};
const mockHierarchy = {
    module_id: "market-edge",
    hierarchy: {
        global: [
            {
                flag_key: "show_placeholder_content",
                name: "Show Placeholder Content",
                enabled: true,
                affects_module: true
            }
        ],
        module: [
            {
                flag_key: "modules.market_edge.enabled",
                name: "Market Edge Module Enabled",
                enabled: true,
                overrides_global: false
            }
        ],
        features: {
            analytics: [
                {
                    flag_key: "modules.market_edge.analytics.basic",
                    name: "Basic Analytics",
                    enabled: true,
                    capability: "basic_analytics"
                }
            ]
        },
        capabilities: {
            basic_analytics: [
                {
                    flag_key: "modules.market_edge.capabilities.basic_analytics",
                    name: "Basic Analytics Capability",
                    enabled: true,
                    config: {
                        max_queries: 100
                    }
                }
            ]
        }
    },
    effective_flags: {
        "show_placeholder_content": {
            enabled: true,
            source: "global",
            config: {}
        },
        "modules.market_edge.enabled": {
            enabled: true,
            source: "module",
            config: {}
        }
    },
    inheritance_chain: [
        {
            level: "global",
            flag_key: "show_placeholder_content",
            enabled: true
        },
        {
            level: "module",
            flag_key: "modules.market_edge.enabled",
            enabled: true
        }
    ]
};
// Mock services
_globals.jest.mock("@/services/module-feature-flag-api");
_globals.jest.mock("@/lib/auth");
// Mock fetch for other API calls
global.fetch = _globals.jest.fn();
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                cacheTime: 0
            }
        }
    });
const TestWrapper = ({ children })=>{
    const queryClient = createTestQueryClient();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
// Mock hook implementations for testing
_globals.jest.mock("@/hooks/useAuth", ()=>({
        useAuth: ()=>({
                user: {
                    id: "test-user",
                    organisation_id: "test-org"
                },
                isAuthenticated: true
            })
    }));
describe("Module-Feature Flag Integration (US-203)", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        _modulefeatureflagapi.moduleFeatureFlagApiService.getModulesWithFlags.mockResolvedValue([
            mockModuleWithFlags
        ]);
        _modulefeatureflagapi.moduleFeatureFlagApiService.discoverEnabledModules.mockResolvedValue(mockDiscoveryResponse);
        _modulefeatureflagapi.moduleFeatureFlagApiService.getModuleFlagHierarchy.mockResolvedValue(mockHierarchy);
        _modulefeatureflagapi.moduleFeatureFlagApiService.checkModuleCapabilities.mockResolvedValue({
            "basic_analytics": true,
            "advanced_analytics": false
        });
        global.fetch.mockResolvedValue({
            ok: true,
            json: async ()=>({
                    modules: []
                })
        });
    });
    describe("Module Discovery Component", ()=>{
        it("should display enabled and disabled modules based on feature flags", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleDiscovery.ModuleDiscovery, {})
            }));
            // Wait for loading to complete
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByText("Loading")).not.toBeInTheDocument();
            });
            // Check enabled modules are displayed
            expect(_react1.screen.getByText("Market Edge")).toBeInTheDocument();
            expect(_react1.screen.getByText("healthy")).toBeInTheDocument();
            // Check disabled modules are displayed
            expect(_react1.screen.getByText("Causal Edge")).toBeInTheDocument();
            expect(_react1.screen.getByText("Missing required flags")).toBeInTheDocument();
            // Check summary stats
            expect(_react1.screen.getByText("Total Available")).toBeInTheDocument();
            expect(_react1.screen.getByText("3")).toBeInTheDocument() // total_available
            ;
            expect(_react1.screen.getByText("1")).toBeInTheDocument() // user_accessible
            ;
        });
        it("should handle module selection for flag management", async ()=>{
            const onModuleSelect = _globals.jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleDiscovery.ModuleDiscovery, {
                    onModuleSelect: onModuleSelect
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Market Edge")).toBeInTheDocument();
            });
            // Click on module
            _react1.fireEvent.click(_react1.screen.getByText("Market Edge"));
            expect(onModuleSelect).toHaveBeenCalledWith("market-edge");
        });
        it("should show capability information", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleDiscovery.ModuleDiscovery, {
                    showCapabilities: true
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Capabilities (2):")).toBeInTheDocument();
                expect(_react1.screen.getByText("basic_analytics")).toBeInTheDocument();
                expect(_react1.screen.getByText("competitor_tracking")).toBeInTheDocument();
            });
        });
    });
    describe("Module Flag Manager Component", ()=>{
        it("should display module flag hierarchy", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleFlagManager.ModuleFlagManager, {
                    moduleId: "market-edge"
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Flag Hierarchy: market-edge")).toBeInTheDocument();
            });
            // Check hierarchy levels are displayed
            expect(_react1.screen.getByText("Global Flags")).toBeInTheDocument();
            expect(_react1.screen.getByText("Module Flags")).toBeInTheDocument();
            // Check specific flags
            expect(_react1.screen.getByText("Show Placeholder Content")).toBeInTheDocument();
            expect(_react1.screen.getByText("Market Edge Module Enabled")).toBeInTheDocument();
        });
        it("should show inheritance chain for selected flag", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleFlagManager.ModuleFlagManager, {
                    moduleId: "market-edge",
                    showInheritance: true
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Market Edge Module Enabled")).toBeInTheDocument();
            });
            // Click on a flag to select it
            _react1.fireEvent.click(_react1.screen.getByText("Market Edge Module Enabled"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Inheritance Chain:")).toBeInTheDocument();
                expect(_react1.screen.getByText("Effective State")).toBeInTheDocument();
            });
        });
        it("should handle module selection and switching", async ()=>{
            const onModuleSelect = _globals.jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleFlagManager.ModuleFlagManager, {
                    onModuleSelect: onModuleSelect
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Select Module")).toBeInTheDocument();
            });
            // Should show available modules
            expect(_react1.screen.getByText("market-edge")).toBeInTheDocument();
        });
    });
    describe("Enhanced Module Manager Component", ()=>{
        it("should display modules with flag status integration", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedModuleManager.EnhancedModuleManager, {})
            }));
            // Wait for components to load
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Enhanced Module Manager")).toBeInTheDocument();
            });
            // Check view tabs are present
            expect(_react1.screen.getByText("Overview")).toBeInTheDocument();
            expect(_react1.screen.getByText("Discovery")).toBeInTheDocument();
            expect(_react1.screen.getByText("Flag Management")).toBeInTheDocument();
            expect(_react1.screen.getByText("Health Monitor")).toBeInTheDocument();
        });
        it("should switch between different views", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedModuleManager.EnhancedModuleManager, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Enhanced Module Manager")).toBeInTheDocument();
            });
            // Click on Discovery tab
            _react1.fireEvent.click(_react1.screen.getByText("Discovery"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Module Discovery")).toBeInTheDocument();
            });
            // Click on Flag Management tab
            _react1.fireEvent.click(_react1.screen.getByText("Flag Management"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Module Flag Manager")).toBeInTheDocument();
            });
        });
    });
    describe("Feature Flagged Application Registry", ()=>{
        it("should show application availability based on feature flags", async ()=>{
            // Mock the application access hook
            const mockUseApplicationAccess = _globals.jest.fn(()=>({
                    canAccessApplication: true,
                    canAccessFeature: _globals.jest.fn(()=>true),
                    canUseCapability: _globals.jest.fn(()=>true),
                    applicationConfig: null,
                    moduleCapabilities: [
                        "basic_analytics"
                    ],
                    isLoading: false,
                    error: null,
                    debugInfo: {
                        requiredFlags: {
                            "show_placeholder_content": true
                        },
                        optionalFlags: {
                            "demo_mode": true
                        },
                        moduleEnabled: true,
                        moduleHealth: "healthy"
                    }
                }));
            // Mock the hook
            _globals.jest.doMock("@/hooks/useModuleFeatureFlag", ()=>({
                    useApplicationAccess: mockUseApplicationAccess
                }));
            const { useApplicationAccess } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../hooks/useModuleFeatureFlag")));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeatureFlaggedApplicationRegistry.default, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Application Registry")).toBeInTheDocument();
            });
            // Should show applications with availability status
            expect(_react1.screen.getByText("Access applications based on your feature flags and permissions")).toBeInTheDocument();
        });
    });
    describe("Module Feature Flag Hooks", ()=>{
        it("useModuleFeatureFlag should return correct module state", async ()=>{
            const TestComponent = ()=>{
                const result = (0, _useModuleFeatureFlag.useModuleFeatureFlag)("market-edge");
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Module Enabled: ",
                                result.isModuleEnabled ? "Yes" : "No"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Health: ",
                                result.health
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Capabilities: ",
                                result.availableCapabilities.join(", ")
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Module Enabled: Yes")).toBeInTheDocument();
                expect(_react1.screen.getByText("Health: healthy")).toBeInTheDocument();
            });
        });
        it("useApplicationAccess should check feature flags and module availability", async ()=>{
            const TestComponent = ()=>{
                const result = (0, _useModuleFeatureFlag.useApplicationAccess)("market-edge");
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Can Access: ",
                                result.canAccessApplication ? "Yes" : "No"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Loading: ",
                                result.isLoading ? "Yes" : "No"
                            ]
                        }),
                        result.error && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Error: ",
                                result.error.message
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Loading: No")).toBeInTheDocument();
            });
        });
        it("useFeatureFlaggedRoute should control route access", async ()=>{
            const TestComponent = ()=>{
                const result = (0, _useModuleFeatureFlag.useFeatureFlaggedRoute)("/market-edge", [
                    "modules.market_edge.enabled"
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Can Access Route: ",
                                result.canAccess ? "Yes" : "No"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Should Redirect: ",
                                result.shouldRedirect ? "Yes" : "No"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Missing Flags: ",
                                result.missingFlags.join(", ")
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Should control access based on feature flags
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Can Access Route:")).toBeInTheDocument();
            });
        });
    });
    describe("Hierarchical Flag Inheritance", ()=>{
        it("should correctly resolve flag inheritance from global to capability level", async ()=>{
            const TestComponent = ()=>{
                const hierarchy = (0, _useModuleFeatureFlags.useModuleFlagHierarchy)("market-edge");
                if (hierarchy.isLoading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                if (hierarchy.error) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Error"
                });
                if (!hierarchy.hierarchy) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "No hierarchy"
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            children: "Hierarchy loaded"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Global flags: ",
                                hierarchy.hierarchy.global.length
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Module flags: ",
                                hierarchy.hierarchy.module.length
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Effective flags: ",
                                Object.keys(hierarchy.effectiveFlags).length
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Hierarchy loaded")).toBeInTheDocument();
                expect(_react1.screen.getByText("Global flags: 1")).toBeInTheDocument();
                expect(_react1.screen.getByText("Module flags: 1")).toBeInTheDocument();
            });
        });
        it("should handle flag overrides correctly", ()=>{
            // Test that child flags can override parent flags
            // This would be tested through the hierarchy resolution logic
            const effectiveFlags = {
                "global.feature": {
                    enabled: true,
                    source: "global"
                },
                "module.feature": {
                    enabled: false,
                    source: "module"
                } // overrides global
            };
            // In a real implementation, the child flag should override the parent
            expect(effectiveFlags["module.feature"].enabled).toBe(false);
            expect(effectiveFlags["module.feature"].source).toBe("module");
        });
    });
    describe("Error Handling", ()=>{
        it("should handle API errors gracefully", async ()=>{
            _modulefeatureflagapi.moduleFeatureFlagApiService.getModulesWithFlags.mockRejectedValue(new Error("API Error"));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ModuleDiscovery.ModuleDiscovery, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Module Discovery Failed")).toBeInTheDocument();
                expect(_react1.screen.getByText("API Error")).toBeInTheDocument();
            });
        });
        it("should provide fallback behavior when flags are unavailable", async ()=>{
            // Test fallback behavior when feature flag service is down
            const TestComponent = ()=>{
                const result = (0, _useModuleFeatureFlag.useModuleFeatureFlag)("market-edge");
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Module Available: ",
                                result.isAvailable ? "Yes" : "No"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Has Error: ",
                                result.error ? "Yes" : "No"
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Should handle graceful degradation
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Module Available:")).toBeInTheDocument();
            });
        });
    });
    describe("Performance and Caching", ()=>{
        it("should cache module flag results", async ()=>{
            const TestComponent = ()=>{
                const result1 = (0, _useModuleFeatureFlags.useModuleFeatureFlags)();
                const result2 = (0, _useModuleFeatureFlags.useModuleFeatureFlags)() // Should use cache
                ;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            children: "Calls made"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Cache working: ",
                                result1.lastUpdated === result2.lastUpdated ? "Yes" : "No"
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Verify API was called only once due to caching
            await (0, _react1.waitFor)(()=>{
                expect(_modulefeatureflagapi.moduleFeatureFlagApiService.getModulesWithFlags).toHaveBeenCalledTimes(1);
            });
        });
        it("should batch capability checks", async ()=>{
            const TestComponent = ()=>{
                const result = (0, _useModuleFeatureFlags.useModuleCapabilities)("market-edge", [
                    "basic_analytics",
                    "advanced_analytics"
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Capabilities checked: ",
                            Object.keys(result.capabilities).length
                        ]
                    })
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Verify single batched API call was made
            await (0, _react1.waitFor)(()=>{
                expect(_modulefeatureflagapi.moduleFeatureFlagApiService.checkModuleCapabilities).toHaveBeenCalledTimes(1);
                expect(_modulefeatureflagapi.moduleFeatureFlagApiService.checkModuleCapabilities).toHaveBeenCalledWith("market-edge", [
                    "basic_analytics",
                    "advanced_analytics"
                ]);
            });
        });
    });
});
describe("Integration with Existing Application Registry", ()=>{
    it("should maintain backward compatibility with existing ApplicationRegistry", ()=>{
        // Test that existing APPLICATION_REGISTRY structure works
        const { APPLICATION_REGISTRY } = require("@/components/ui/ApplicationRegistry");
        // Verify structure hasn't changed
        expect(APPLICATION_REGISTRY).toBeDefined();
        expect(APPLICATION_REGISTRY.length).toBeGreaterThan(0);
        const firstApp = APPLICATION_REGISTRY[0];
        expect(firstApp).toHaveProperty("id");
        expect(firstApp).toHaveProperty("moduleId");
        expect(firstApp).toHaveProperty("requiredFlags");
        expect(firstApp).toHaveProperty("optionalFlags");
    });
    it("should support feature flag integration without breaking existing functionality", ()=>{
        // Verify that the enhanced registry can fallback to basic functionality
        const applicationConfig = {
            id: "test-app",
            moduleId: "test-module",
            requiredFlags: [
                "test.required"
            ],
            optionalFlags: [
                "test.optional"
            ]
        };
        // Basic functionality should still work
        expect(applicationConfig.id).toBe("test-app");
        expect(applicationConfig.requiredFlags).toContain("test.required");
    });
});

//# sourceMappingURL=data:application/json;base64,