d420d44c6c20133948ddafcb1da14ab1
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useApplicationAccess: function() {
        return useApplicationAccess;
    },
    useApplicationFeatureFlags: function() {
        return useApplicationFeatureFlags;
    },
    useFeatureFlaggedRoute: function() {
        return useFeatureFlaggedRoute;
    },
    useModuleFeatureFlag: function() {
        return useModuleFeatureFlag;
    },
    useMultipleModuleFeatureFlags: function() {
        return useMultipleModuleFeatureFlags;
    }
});
const _react = require("react");
const _useFeatureFlags = require("./useFeatureFlags");
const _useModuleFeatureFlags = require("./useModuleFeatureFlags");
const _ApplicationRegistry = require("../components/ui/ApplicationRegistry");
function useModuleFeatureFlag(moduleId, capability) {
    const moduleFlags = (0, _useModuleFeatureFlags.useModuleFeatureFlags)();
    const discovery = (0, _useModuleFeatureFlags.useModuleDiscovery)();
    // Get application config for the module
    const appConfig = (0, _react.useMemo)(()=>_ApplicationRegistry.APPLICATION_REGISTRY.find((app)=>app.moduleId === moduleId), [
        moduleId
    ]);
    // Check if module is enabled via feature flags
    const isModuleEnabled = moduleFlags.moduleFlags[moduleId] || false;
    // Check if specific capability is enabled
    const hasCapability = capability ? moduleFlags.moduleCapabilities[moduleId]?.includes(capability) || false : true;
    // Get module discovery info
    const discoveryModule = (0, _react.useMemo)(()=>discovery.enabledModules.find((m)=>m.module_id === moduleId) || discovery.disabledModules.find((m)=>m.module_id === moduleId), [
        discovery.enabledModules,
        discovery.disabledModules,
        moduleId
    ]);
    // Build hierarchical flag key for the module
    const getModuleFlagKey = (flagSuffix)=>{
        return `modules.${moduleId.replace(/-/g, "_")}.${flagSuffix}`;
    };
    // Build capability flag key
    const getCapabilityFlagKey = (capabilityName)=>{
        return `modules.${moduleId.replace(/-/g, "_")}.capabilities.${capabilityName}`;
    };
    // Get module configuration
    const moduleConfig = moduleFlags.moduleConfigs[moduleId] || {};
    return {
        // Module state
        isModuleEnabled,
        hasCapability,
        isAvailable: !!discoveryModule,
        // Module info
        moduleConfig,
        appConfig,
        discoveryModule,
        // Capabilities
        availableCapabilities: moduleFlags.moduleCapabilities[moduleId] || [],
        // Health
        health: discoveryModule?.health || "unavailable",
        isHealthy: discoveryModule?.health === "healthy",
        // Loading states
        isLoading: moduleFlags.isLoading || discovery.isLoading,
        error: moduleFlags.error || discovery.error,
        // Utility functions
        getModuleFlagKey,
        getCapabilityFlagKey,
        // Refresh function
        refresh: ()=>{
            moduleFlags.refetch();
            discovery.refresh();
        }
    };
}
function useMultipleModuleFeatureFlags(moduleIds) {
    const moduleFlags = (0, _useModuleFeatureFlags.useModuleFeatureFlags)();
    const discovery = (0, _useModuleFeatureFlags.useModuleDiscovery)();
    const results = (0, _react.useMemo)(()=>{
        return moduleIds.reduce((acc, moduleId)=>{
            const appConfig = _ApplicationRegistry.APPLICATION_REGISTRY.find((app)=>app.moduleId === moduleId);
            const isEnabled = moduleFlags.moduleFlags[moduleId] || false;
            const capabilities = moduleFlags.moduleCapabilities[moduleId] || [];
            const config = moduleFlags.moduleConfigs[moduleId] || {};
            const discoveryModule = discovery.enabledModules.find((m)=>m.module_id === moduleId) || discovery.disabledModules.find((m)=>m.module_id === moduleId);
            acc[moduleId] = {
                isEnabled,
                capabilities,
                config,
                appConfig,
                discoveryModule,
                health: discoveryModule?.health || "unavailable"
            };
            return acc;
        }, {});
    }, [
        moduleIds,
        moduleFlags,
        discovery
    ]);
    return {
        modules: results,
        isLoading: moduleFlags.isLoading || discovery.isLoading,
        error: moduleFlags.error || discovery.error,
        enabledCount: Object.values(results).filter((m)=>m.isEnabled).length,
        totalCount: moduleIds.length,
        refresh: ()=>{
            moduleFlags.refetch();
            discovery.refresh();
        }
    };
}
function useApplicationFeatureFlags(applicationId) {
    const appConfig = _ApplicationRegistry.APPLICATION_REGISTRY.find((app)=>app.id === applicationId);
    // Use standard feature flags hook for required flags
    const requiredFlags = (0, _useFeatureFlags.useFeatureFlags)(appConfig?.requiredFlags || [], {
        fallbackValues: {}
    });
    // Use standard feature flags hook for optional flags
    const optionalFlags = (0, _useFeatureFlags.useFeatureFlags)(appConfig?.optionalFlags || [], {
        fallbackValues: {}
    });
    // Use module-specific flags
    const moduleFlag = useModuleFeatureFlag(appConfig?.moduleId || applicationId);
    // Check if application is available
    const isApplicationEnabled = (0, _react.useMemo)(()=>{
        if (!appConfig) return false;
        // All required flags must be enabled
        const requiredEnabled = appConfig.requiredFlags.every((flagKey)=>requiredFlags.flags[flagKey]);
        // Module must be enabled
        const moduleEnabled = moduleFlag.isModuleEnabled;
        return requiredEnabled && moduleEnabled;
    }, [
        appConfig,
        requiredFlags.flags,
        moduleFlag.isModuleEnabled
    ]);
    // Get enhanced configuration
    const enhancedConfig = (0, _react.useMemo)(()=>{
        const config = {};
        // Merge required flag configs
        appConfig?.requiredFlags.forEach((flagKey)=>{
            config[flagKey] = requiredFlags.configs[flagKey] || {};
        });
        // Merge optional flag configs
        appConfig?.optionalFlags.forEach((flagKey)=>{
            config[flagKey] = optionalFlags.configs[flagKey] || {};
        });
        // Merge module config
        Object.assign(config, moduleFlag.moduleConfig);
        return config;
    }, [
        appConfig,
        requiredFlags.configs,
        optionalFlags.configs,
        moduleFlag.moduleConfig
    ]);
    return {
        // Application state
        isApplicationEnabled,
        appConfig,
        // Flag states
        requiredFlags: requiredFlags.flags,
        optionalFlags: optionalFlags.flags,
        // Module state
        isModuleEnabled: moduleFlag.isModuleEnabled,
        moduleCapabilities: moduleFlag.availableCapabilities,
        moduleHealth: moduleFlag.health,
        // Enhanced configuration
        config: enhancedConfig,
        // Loading states
        isLoading: requiredFlags.isLoading || optionalFlags.isLoading || moduleFlag.isLoading,
        error: requiredFlags.error || optionalFlags.error || moduleFlag.error,
        // Utility functions
        hasFeature: (featureName)=>{
            return [
                ...appConfig?.requiredFlags || [],
                ...appConfig?.optionalFlags || []
            ].some((flagKey)=>flagKey.includes(featureName) && (requiredFlags.flags[flagKey] || optionalFlags.flags[flagKey]));
        },
        hasCapability: (capability)=>{
            return moduleFlag.availableCapabilities.includes(capability);
        },
        // Refresh function
        refresh: ()=>{
            requiredFlags.refetch();
            optionalFlags.refetch();
            moduleFlag.refresh();
        }
    };
}
function useApplicationAccess(applicationId) {
    const appFlags = useApplicationFeatureFlags(applicationId);
    return {
        // Access control
        canAccessApplication: appFlags.isApplicationEnabled,
        canAccessFeature: (featureName)=>appFlags.hasFeature(featureName),
        canUseCapability: (capability)=>appFlags.hasCapability(capability),
        // Application info
        applicationConfig: appFlags.appConfig,
        moduleCapabilities: appFlags.moduleCapabilities,
        // State
        isLoading: appFlags.isLoading,
        error: appFlags.error,
        // Debug info
        debugInfo: {
            requiredFlags: appFlags.requiredFlags,
            optionalFlags: appFlags.optionalFlags,
            moduleEnabled: appFlags.isModuleEnabled,
            moduleHealth: appFlags.moduleHealth,
            config: appFlags.config
        },
        refresh: appFlags.refresh
    };
}
function useFeatureFlaggedRoute(routePath, requiredFlags = [], fallbackPath = "/dashboard") {
    const flags = (0, _useFeatureFlags.useFeatureFlags)(requiredFlags);
    const canAccessRoute = (0, _react.useMemo)(()=>{
        return requiredFlags.every((flagKey)=>flags.flags[flagKey]);
    }, [
        requiredFlags,
        flags.flags
    ]);
    return {
        canAccess: canAccessRoute,
        shouldRedirect: !canAccessRoute && !flags.isLoading,
        redirectTo: fallbackPath,
        isLoading: flags.isLoading,
        error: flags.error,
        missingFlags: requiredFlags.filter((flagKey)=>!flags.flags[flagKey])
    };
}

//# sourceMappingURL=data:application/json;base64,