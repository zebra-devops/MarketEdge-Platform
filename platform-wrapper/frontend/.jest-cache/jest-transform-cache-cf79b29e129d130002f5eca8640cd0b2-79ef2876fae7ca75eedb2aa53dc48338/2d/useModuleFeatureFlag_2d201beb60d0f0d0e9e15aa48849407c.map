{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/hooks/useModuleFeatureFlag.ts"],"sourcesContent":["'use client'\n\nimport { useMemo } from 'react'\nimport { useFeatureFlags } from './useFeatureFlags'\nimport { useModuleFeatureFlags, useModuleDiscovery } from './useModuleFeatureFlags'\nimport { APPLICATION_REGISTRY } from '@/components/ui/ApplicationRegistry'\n\n/**\n * Hook for checking a specific module's feature flags\n * Combines module-level and capability-level flag checking\n */\nexport function useModuleFeatureFlag(\n  moduleId: string,\n  capability?: string\n) {\n  const moduleFlags = useModuleFeatureFlags()\n  const discovery = useModuleDiscovery()\n\n  // Get application config for the module\n  const appConfig = useMemo(() => \n    APPLICATION_REGISTRY.find(app => app.moduleId === moduleId),\n    [moduleId]\n  )\n\n  // Check if module is enabled via feature flags\n  const isModuleEnabled = moduleFlags.moduleFlags[moduleId] || false\n\n  // Check if specific capability is enabled\n  const hasCapability = capability \n    ? moduleFlags.moduleCapabilities[moduleId]?.includes(capability) || false\n    : true\n\n  // Get module discovery info\n  const discoveryModule = useMemo(() => \n    discovery.enabledModules.find(m => m.module_id === moduleId) ||\n    discovery.disabledModules.find(m => m.module_id === moduleId),\n    [discovery.enabledModules, discovery.disabledModules, moduleId]\n  )\n\n  // Build hierarchical flag key for the module\n  const getModuleFlagKey = (flagSuffix: string) => {\n    return `modules.${moduleId.replace(/-/g, '_')}.${flagSuffix}`\n  }\n\n  // Build capability flag key\n  const getCapabilityFlagKey = (capabilityName: string) => {\n    return `modules.${moduleId.replace(/-/g, '_')}.capabilities.${capabilityName}`\n  }\n\n  // Get module configuration\n  const moduleConfig = moduleFlags.moduleConfigs[moduleId] || {}\n\n  return {\n    // Module state\n    isModuleEnabled,\n    hasCapability,\n    isAvailable: !!discoveryModule,\n    \n    // Module info\n    moduleConfig,\n    appConfig,\n    discoveryModule,\n    \n    // Capabilities\n    availableCapabilities: moduleFlags.moduleCapabilities[moduleId] || [],\n    \n    // Health\n    health: discoveryModule?.health || 'unavailable',\n    isHealthy: discoveryModule?.health === 'healthy',\n    \n    // Loading states\n    isLoading: moduleFlags.isLoading || discovery.isLoading,\n    error: moduleFlags.error || discovery.error,\n    \n    // Utility functions\n    getModuleFlagKey,\n    getCapabilityFlagKey,\n    \n    // Refresh function\n    refresh: () => {\n      moduleFlags.refetch()\n      discovery.refresh()\n    }\n  }\n}\n\n/**\n * Hook for checking multiple module feature flags at once\n */\nexport function useMultipleModuleFeatureFlags(moduleIds: string[]) {\n  const moduleFlags = useModuleFeatureFlags()\n  const discovery = useModuleDiscovery()\n\n  const results = useMemo(() => {\n    return moduleIds.reduce((acc, moduleId) => {\n      const appConfig = APPLICATION_REGISTRY.find(app => app.moduleId === moduleId)\n      const isEnabled = moduleFlags.moduleFlags[moduleId] || false\n      const capabilities = moduleFlags.moduleCapabilities[moduleId] || []\n      const config = moduleFlags.moduleConfigs[moduleId] || {}\n      \n      const discoveryModule = discovery.enabledModules.find(m => m.module_id === moduleId) ||\n                            discovery.disabledModules.find(m => m.module_id === moduleId)\n\n      acc[moduleId] = {\n        isEnabled,\n        capabilities,\n        config,\n        appConfig,\n        discoveryModule,\n        health: discoveryModule?.health || 'unavailable'\n      }\n      return acc\n    }, {} as Record<string, {\n      isEnabled: boolean\n      capabilities: string[]\n      config: Record<string, any>\n      appConfig?: typeof APPLICATION_REGISTRY[0]\n      discoveryModule?: any\n      health: string\n    }>)\n  }, [moduleIds, moduleFlags, discovery])\n\n  return {\n    modules: results,\n    isLoading: moduleFlags.isLoading || discovery.isLoading,\n    error: moduleFlags.error || discovery.error,\n    enabledCount: Object.values(results).filter(m => m.isEnabled).length,\n    totalCount: moduleIds.length,\n    refresh: () => {\n      moduleFlags.refetch()\n      discovery.refresh()\n    }\n  }\n}\n\n/**\n * Hook for application-aware feature flag checking\n * Integrates with ApplicationRegistry for complete feature control\n */\nexport function useApplicationFeatureFlags(applicationId: string) {\n  const appConfig = APPLICATION_REGISTRY.find(app => app.id === applicationId)\n  \n  // Use standard feature flags hook for required flags\n  const requiredFlags = useFeatureFlags(\n    appConfig?.requiredFlags || [],\n    { fallbackValues: {} }\n  )\n  \n  // Use standard feature flags hook for optional flags\n  const optionalFlags = useFeatureFlags(\n    appConfig?.optionalFlags || [],\n    { fallbackValues: {} }\n  )\n\n  // Use module-specific flags\n  const moduleFlag = useModuleFeatureFlag(\n    appConfig?.moduleId || applicationId\n  )\n\n  // Check if application is available\n  const isApplicationEnabled = useMemo(() => {\n    if (!appConfig) return false\n    \n    // All required flags must be enabled\n    const requiredEnabled = appConfig.requiredFlags.every(\n      flagKey => requiredFlags.flags[flagKey]\n    )\n    \n    // Module must be enabled\n    const moduleEnabled = moduleFlag.isModuleEnabled\n    \n    return requiredEnabled && moduleEnabled\n  }, [appConfig, requiredFlags.flags, moduleFlag.isModuleEnabled])\n\n  // Get enhanced configuration\n  const enhancedConfig = useMemo(() => {\n    const config: Record<string, any> = {}\n    \n    // Merge required flag configs\n    appConfig?.requiredFlags.forEach(flagKey => {\n      config[flagKey] = requiredFlags.configs[flagKey] || {}\n    })\n    \n    // Merge optional flag configs\n    appConfig?.optionalFlags.forEach(flagKey => {\n      config[flagKey] = optionalFlags.configs[flagKey] || {}\n    })\n    \n    // Merge module config\n    Object.assign(config, moduleFlag.moduleConfig)\n    \n    return config\n  }, [appConfig, requiredFlags.configs, optionalFlags.configs, moduleFlag.moduleConfig])\n\n  return {\n    // Application state\n    isApplicationEnabled,\n    appConfig,\n    \n    // Flag states\n    requiredFlags: requiredFlags.flags,\n    optionalFlags: optionalFlags.flags,\n    \n    // Module state\n    isModuleEnabled: moduleFlag.isModuleEnabled,\n    moduleCapabilities: moduleFlag.availableCapabilities,\n    moduleHealth: moduleFlag.health,\n    \n    // Enhanced configuration\n    config: enhancedConfig,\n    \n    // Loading states\n    isLoading: requiredFlags.isLoading || optionalFlags.isLoading || moduleFlag.isLoading,\n    error: requiredFlags.error || optionalFlags.error || moduleFlag.error,\n    \n    // Utility functions\n    hasFeature: (featureName: string) => {\n      return [...(appConfig?.requiredFlags || []), ...(appConfig?.optionalFlags || [])]\n        .some(flagKey => flagKey.includes(featureName) && \n              (requiredFlags.flags[flagKey] || optionalFlags.flags[flagKey]))\n    },\n    \n    hasCapability: (capability: string) => {\n      return moduleFlag.availableCapabilities.includes(capability)\n    },\n    \n    // Refresh function\n    refresh: () => {\n      requiredFlags.refetch()\n      optionalFlags.refetch()\n      moduleFlag.refresh()\n    }\n  }\n}\n\n/**\n * Hook for checking if user has access to specific application features\n * based on both feature flags and module capabilities\n */\nexport function useApplicationAccess(applicationId: string) {\n  const appFlags = useApplicationFeatureFlags(applicationId)\n  \n  return {\n    // Access control\n    canAccessApplication: appFlags.isApplicationEnabled,\n    canAccessFeature: (featureName: string) => appFlags.hasFeature(featureName),\n    canUseCapability: (capability: string) => appFlags.hasCapability(capability),\n    \n    // Application info\n    applicationConfig: appFlags.appConfig,\n    moduleCapabilities: appFlags.moduleCapabilities,\n    \n    // State\n    isLoading: appFlags.isLoading,\n    error: appFlags.error,\n    \n    // Debug info\n    debugInfo: {\n      requiredFlags: appFlags.requiredFlags,\n      optionalFlags: appFlags.optionalFlags,\n      moduleEnabled: appFlags.isModuleEnabled,\n      moduleHealth: appFlags.moduleHealth,\n      config: appFlags.config\n    },\n    \n    refresh: appFlags.refresh\n  }\n}\n\n/**\n * Higher-order hook for feature flag-aware routing\n */\nexport function useFeatureFlaggedRoute(\n  routePath: string,\n  requiredFlags: string[] = [],\n  fallbackPath: string = '/dashboard'\n) {\n  const flags = useFeatureFlags(requiredFlags)\n  \n  const canAccessRoute = useMemo(() => {\n    return requiredFlags.every(flagKey => flags.flags[flagKey])\n  }, [requiredFlags, flags.flags])\n\n  return {\n    canAccess: canAccessRoute,\n    shouldRedirect: !canAccessRoute && !flags.isLoading,\n    redirectTo: fallbackPath,\n    isLoading: flags.isLoading,\n    error: flags.error,\n    missingFlags: requiredFlags.filter(flagKey => !flags.flags[flagKey])\n  }\n}"],"names":["useApplicationAccess","useApplicationFeatureFlags","useFeatureFlaggedRoute","useModuleFeatureFlag","useMultipleModuleFeatureFlags","moduleId","capability","moduleFlags","useModuleFeatureFlags","discovery","useModuleDiscovery","appConfig","useMemo","APPLICATION_REGISTRY","find","app","isModuleEnabled","hasCapability","moduleCapabilities","includes","discoveryModule","enabledModules","m","module_id","disabledModules","getModuleFlagKey","flagSuffix","replace","getCapabilityFlagKey","capabilityName","moduleConfig","moduleConfigs","isAvailable","availableCapabilities","health","isHealthy","isLoading","error","refresh","refetch","moduleIds","results","reduce","acc","isEnabled","capabilities","config","modules","enabledCount","Object","values","filter","length","totalCount","applicationId","id","requiredFlags","useFeatureFlags","fallbackValues","optionalFlags","moduleFlag","isApplicationEnabled","requiredEnabled","every","flagKey","flags","moduleEnabled","enhancedConfig","forEach","configs","assign","moduleHealth","hasFeature","featureName","some","appFlags","canAccessApplication","canAccessFeature","canUseCapability","applicationConfig","debugInfo","routePath","fallbackPath","canAccessRoute","canAccess","shouldRedirect","redirectTo","missingFlags"],"mappings":"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"}