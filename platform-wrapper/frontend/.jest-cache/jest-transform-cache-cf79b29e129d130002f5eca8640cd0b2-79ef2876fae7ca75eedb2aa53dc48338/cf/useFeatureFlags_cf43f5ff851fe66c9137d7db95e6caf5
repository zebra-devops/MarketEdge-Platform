7c49cf79c67d0491913b841ed400b881
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    featureFlagKeys: function() {
        return featureFlagKeys;
    },
    useAllFeatureFlags: function() {
        return useAllFeatureFlags;
    },
    useFeatureFlag: function() {
        return useFeatureFlag;
    },
    useFeatureFlagCache: function() {
        return useFeatureFlagCache;
    },
    useFeatureFlags: function() {
        return useFeatureFlags;
    }
});
const _reactquery = require("react-query");
const _useAuth = require("./useAuth");
const _featureflagapi = require("../services/feature-flag-api");
const _featureflags = require("../types/feature-flags");
const featureFlagKeys = {
    all: [
        "featureFlags"
    ],
    single: (flagKey)=>[
            "featureFlags",
            "single",
            flagKey
        ],
    multiple: (flagKeys)=>[
            "featureFlags",
            "multiple",
            flagKeys.sort().join(",")
        ],
    enabled: (moduleId)=>[
            "featureFlags",
            "enabled",
            moduleId
        ],
    user: (userId)=>[
            "featureFlags",
            "user",
            userId
        ]
};
// Default options
const DEFAULT_OPTIONS = {
    fallbackValue: false,
    cacheTime: 5 * 60 * 1000,
    staleTime: 2 * 60 * 1000,
    refetchInterval: false,
    refetchOnWindowFocus: true,
    retryCount: 2,
    enabled: true
};
function useFeatureFlag(flagKey, options = {}) {
    const { user, isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: featureFlagKeys.single(flagKey),
        queryFn: ()=>_featureflagapi.featureFlagApiService.checkFeatureFlag(flagKey),
        enabled: isAuthenticated && mergedOptions.enabled && !!flagKey,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        refetchOnWindowFocus: mergedOptions.refetchOnWindowFocus,
        retry: mergedOptions.retryCount,
        onError: (error)=>{
            console.warn(`Feature flag check failed for '${flagKey}':`, error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(featureFlagKeys.single(flagKey));
        return query.refetch();
    };
    // Determine flag state with fallback
    let isEnabled = mergedOptions.fallbackValue;
    let config = null;
    let error = null;
    if (query.data) {
        isEnabled = query.data.enabled;
        config = query.data.config || null;
    } else if (query.error) {
        error = query.error instanceof Error ? query.error : new Error("Unknown error");
        // Use fallback for errors unless it's a definitive "disabled" response
        if (query.error instanceof _featureflags.FeatureFlagError && query.error.statusCode === 404) {
            isEnabled = false // Flag doesn't exist, so it's definitely disabled
            ;
        }
    }
    return {
        isEnabled,
        isLoading: query.isLoading,
        error,
        config,
        refetch,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useFeatureFlags(flagKeys, options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options,
        fallbackValues: options.fallbackValues || {}
    };
    // Sort flag keys for consistent cache keys
    const sortedFlagKeys = [
        ...flagKeys
    ].sort();
    const query = (0, _reactquery.useQuery)({
        queryKey: featureFlagKeys.multiple(sortedFlagKeys),
        queryFn: ()=>_featureflagapi.featureFlagApiService.checkMultipleFlags(sortedFlagKeys),
        enabled: isAuthenticated && mergedOptions.enabled && flagKeys.length > 0,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        refetchOnWindowFocus: mergedOptions.refetchOnWindowFocus,
        retry: mergedOptions.retryCount,
        onError: (error)=>{
            console.warn(`Feature flags check failed for keys [${flagKeys.join(", ")}]:`, error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(featureFlagKeys.multiple(sortedFlagKeys));
        return query.refetch();
    };
    // Build result objects
    const flags = {};
    const configs = {};
    flagKeys.forEach((flagKey)=>{
        if (query.data && query.data[flagKey]) {
            flags[flagKey] = query.data[flagKey].enabled;
            configs[flagKey] = query.data[flagKey].config || {};
        } else {
            // Use fallback value
            flags[flagKey] = mergedOptions.fallbackValues[flagKey] ?? mergedOptions.fallbackValue;
            configs[flagKey] = {};
        }
    });
    return {
        flags,
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        configs,
        refetch,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useAllFeatureFlags(moduleId, options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: featureFlagKeys.enabled(moduleId),
        queryFn: ()=>_featureflagapi.featureFlagApiService.getEnabledFeatures(moduleId),
        enabled: isAuthenticated && mergedOptions.enabled,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        refetchOnWindowFocus: mergedOptions.refetchOnWindowFocus,
        retry: mergedOptions.retryCount,
        onError: (error)=>{
            console.warn("All feature flags check failed:", error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(featureFlagKeys.enabled(moduleId));
        return query.refetch();
    };
    // Transform API response to expected format
    const allFlags = {};
    if (query.data?.enabled_features) {
        Object.entries(query.data.enabled_features).forEach(([flagKey, flagData])=>{
            allFlags[flagKey] = {
                enabled: true,
                name: flagData.name,
                config: flagData.config,
                module_id: flagData.module_id
            };
        });
    }
    return {
        allFlags,
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        refetch,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useFeatureFlagCache() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const invalidateFlag = (flagKey)=>{
        queryClient.invalidateQueries(featureFlagKeys.single(flagKey));
    };
    const invalidateMultipleFlags = (flagKeys)=>{
        queryClient.invalidateQueries(featureFlagKeys.multiple(flagKeys));
    };
    const invalidateAllFlags = ()=>{
        queryClient.invalidateQueries(featureFlagKeys.all);
    };
    const preloadFlags = async (flagKeys)=>{
        // Fire parallel prefetch requests
        const promises = flagKeys.map((flagKey)=>queryClient.prefetchQuery({
                queryKey: featureFlagKeys.single(flagKey),
                queryFn: ()=>_featureflagapi.featureFlagApiService.checkFeatureFlag(flagKey),
                staleTime: DEFAULT_OPTIONS.staleTime
            }));
        try {
            await Promise.allSettled(promises);
        } catch (error) {
            console.warn("Some flags failed to preload:", error);
        }
    };
    const getCachedFlag = (flagKey)=>{
        return queryClient.getQueryData(featureFlagKeys.single(flagKey));
    };
    const setCachedFlag = (flagKey, data)=>{
        queryClient.setQueryData(featureFlagKeys.single(flagKey), data);
    };
    return {
        invalidateFlag,
        invalidateMultipleFlags,
        invalidateAllFlags,
        preloadFlags,
        getCachedFlag,
        setCachedFlag
    };
}

//# sourceMappingURL=data:application/json;base64,