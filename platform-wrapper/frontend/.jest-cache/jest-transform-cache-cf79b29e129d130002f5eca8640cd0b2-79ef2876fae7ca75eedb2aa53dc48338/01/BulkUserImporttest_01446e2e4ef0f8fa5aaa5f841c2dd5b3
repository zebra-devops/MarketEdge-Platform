9b71f0099b7d18331d99ae400a4041a3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
require("@testing-library/jest-dom");
const _globals = require("@jest/globals");
const _BulkUserImport = /*#__PURE__*/ _interop_require_default(require("../BulkUserImport"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the dependencies
_globals.jest.mock("@/hooks/useAuth", ()=>({
        useAuthContext: ()=>({
                user: {
                    access_token: "mock-token",
                    role: "admin"
                }
            })
    }));
_globals.jest.mock("@/components/providers/OrganisationProvider", ()=>({
        useOrganisationContext: ()=>({
                allOrganisations: [
                    {
                        id: "org-1",
                        name: "Test Organization",
                        industry_type: "technology"
                    }
                ]
            })
    }));
_globals.jest.mock("@/services/api", ()=>({
        apiService: {
            get: _globals.jest.fn(),
            post: _globals.jest.fn()
        }
    }));
// Mock fetch
global.fetch = _globals.jest.fn();
describe("BulkUserImport", ()=>{
    const mockProps = {
        organisationId: "org-1",
        onImportComplete: _globals.jest.fn()
    };
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    it("renders CSV import button", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        expect(_react.screen.getByText("CSV Import")).toBeInTheDocument();
    });
    it("opens modal when button is clicked", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        expect(_react.screen.getByText("Bulk User Import via CSV")).toBeInTheDocument();
    });
    it("shows file upload area in modal", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        expect(_react.screen.getByText("Drag and drop your CSV file here, or")).toBeInTheDocument();
        expect(_react.screen.getByText("Choose File")).toBeInTheDocument();
    });
    it("shows download template button", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        expect(_react.screen.getByText("Download Template")).toBeInTheDocument();
    });
    it("handles file selection", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        const fileInput = _react.screen.getByRole("button", {
            name: "Choose File"
        });
        expect(fileInput).toBeInTheDocument();
    });
    it("shows validation options", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        expect(_react.screen.getByLabelText("Send invitation emails")).toBeInTheDocument();
        expect(_react.screen.getByLabelText("Skip duplicate emails")).toBeInTheDocument();
    });
    it("calls download template when clicked", async ()=>{
        const mockBlob = new Blob([
            "test"
        ], {
            type: "text/csv"
        });
        global.fetch.mockResolvedValueOnce({
            ok: true,
            blob: ()=>Promise.resolve(mockBlob)
        });
        // Mock URL methods
        global.URL.createObjectURL = _globals.jest.fn(()=>"mock-url");
        global.URL.revokeObjectURL = _globals.jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        _react.fireEvent.click(_react.screen.getByText("Download Template"));
        await (0, _react.waitFor)(()=>{
            expect(global.fetch).toHaveBeenCalledWith("/api/v1/organizations/org-1/users/import/template", expect.objectContaining({
                headers: {
                    "Authorization": "Bearer mock-token"
                }
            }));
        });
    });
    it("handles file upload error for non-CSV files", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        // Mock file input change with non-CSV file
        const fileInput = document.querySelector('input[type="file"]');
        const file = new File([
            "test"
        ], "test.txt", {
            type: "text/plain"
        });
        Object.defineProperty(fileInput, "files", {
            value: [
                file
            ],
            writable: false
        });
        _react.fireEvent.change(fileInput);
    // Should show error for non-CSV file
    // Note: In a real test, you'd check for toast error message
    });
    it("handles large file error", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BulkUserImport.default, {
            ...mockProps
        }));
        _react.fireEvent.click(_react.screen.getByText("CSV Import"));
        // Mock file input change with large file
        const fileInput = document.querySelector('input[type="file"]');
        const largeFile = new File([
            "x".repeat(11 * 1024 * 1024)
        ], "test.csv", {
            type: "text/csv"
        });
        Object.defineProperty(fileInput, "files", {
            value: [
                largeFile
            ],
            writable: false
        });
        _react.fireEvent.change(fileInput);
    // Should show error for large file
    // Note: In a real test, you'd check for toast error message
    });
});

//# sourceMappingURL=data:application/json;base64,