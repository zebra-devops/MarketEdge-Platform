{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/providers/OrganisationProvider.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useState, useEffect } from 'react'\nimport { Organisation, IndustryOption } from '@/types/api'\nimport { apiService } from '@/services/api'\nimport { authService } from '@/services/auth'\nimport { useAuthContext } from '@/hooks/useAuth'\n\ninterface OrganisationContextType {\n  // Current user's organisation\n  currentOrganisation: Organisation | null\n  \n  // All organisations (Super Admin only)\n  allOrganisations: Organisation[]\n  \n  // Available industries\n  availableIndustries: IndustryOption[]\n  \n  // Organizations user has access to\n  accessibleOrganisations: Organisation[]\n  \n  // Loading states\n  isLoadingCurrent: boolean\n  isLoadingAll: boolean\n  isLoadingIndustries: boolean\n  isLoadingAccessible: boolean\n  isSwitching: boolean\n  \n  // Actions\n  refreshCurrentOrganisation: () => Promise<void>\n  refreshAllOrganisations: () => Promise<void>\n  createOrganisation: (data: any) => Promise<Organisation>\n  switchOrganisation: (orgId: string) => Promise<void>\n  refreshAccessibleOrganisations: () => Promise<void>\n  \n  // Utilities\n  canManageOrganisations: boolean\n  isSuperAdmin: boolean\n}\n\nconst OrganisationContext = createContext<OrganisationContextType | undefined>(undefined)\n\nexport const useOrganisationContext = (): OrganisationContextType => {\n  const context = useContext(OrganisationContext)\n  if (!context) {\n    throw new Error('useOrganisationContext must be used within an OrganisationProvider')\n  }\n  return context\n}\n\ninterface OrganisationProviderProps {\n  children: React.ReactNode\n}\n\nexport const OrganisationProvider: React.FC<OrganisationProviderProps> = ({ children }) => {\n  const { user, isAuthenticated, hasRole } = useAuthContext()\n  \n  const [currentOrganisation, setCurrentOrganisation] = useState<Organisation | null>(null)\n  const [allOrganisations, setAllOrganisations] = useState<Organisation[]>([])\n  const [availableIndustries, setAvailableIndustries] = useState<IndustryOption[]>([])\n  const [accessibleOrganisations, setAccessibleOrganisations] = useState<Organisation[]>([])\n  \n  const [isLoadingCurrent, setIsLoadingCurrent] = useState(false)\n  const [isLoadingAll, setIsLoadingAll] = useState(false)\n  const [isLoadingIndustries, setIsLoadingIndustries] = useState(false)\n  const [isLoadingAccessible, setIsLoadingAccessible] = useState(false)\n  const [isSwitching, setIsSwitching] = useState(false)\n\n  // Stabilize isSuperAdmin to prevent infinite loops\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false)\n  const [canManageOrganisations, setCanManageOrganisations] = useState(false)\n  const [lastLoadTime, setLastLoadTime] = useState(0)\n  \n  // Update admin status when user changes\n  useEffect(() => {\n    const adminStatus = hasRole('admin')\n    setIsSuperAdmin(adminStatus)\n    setCanManageOrganisations(adminStatus)\n  }, [user?.id, user?.role]) // Only depend on stable user properties\n\n  // Load selected organization from localStorage on mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const savedOrgId = localStorage.getItem('selectedOrganisationId')\n      if (savedOrgId && currentOrganisation?.id !== savedOrgId) {\n        // Will be loaded when organizations are fetched\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    // Circuit breaker: prevent rapid successive calls\n    const now = Date.now()\n    if (now - lastLoadTime < 2000) { // 2 second cooldown\n      console.warn('OrganisationProvider: Rate limited, skipping load')\n      return\n    }\n    \n    // Only proceed if fully authenticated and tokens are available\n    if (isAuthenticated && user && authService.getToken()) {\n      console.log('OrganisationProvider: Loading organization data for authenticated user')\n      setLastLoadTime(now)\n      \n      // Always load industries\n      loadAvailableIndustries()\n      \n      // Load accessible organizations for all users\n      refreshAccessibleOrganisations()\n      \n      // Load current organisation for regular users\n      if (!isSuperAdmin) {\n        refreshCurrentOrganisation()\n      }\n      \n      // Load all organisations for super admins\n      if (isSuperAdmin) {\n        refreshAllOrganisations()\n      }\n    } else if (isAuthenticated && user && !authService.getToken()) {\n      console.warn('OrganisationProvider: User authenticated but no token available, skipping organization data load')\n    }\n  }, [isAuthenticated, user?.id, isSuperAdmin]) // Use stable user.id instead of full user object\n\n  const loadAvailableIndustries = async () => {\n    try {\n      setIsLoadingIndustries(true)\n      const industries = await apiService.getAvailableIndustries()\n      setAvailableIndustries(industries)\n    } catch (error) {\n      console.error('Failed to load industries:', error)\n    } finally {\n      setIsLoadingIndustries(false)\n    }\n  }\n\n  const refreshCurrentOrganisation = async () => {\n    if (!isAuthenticated || !authService.getToken()) {\n      console.warn('Cannot load current organisation: not authenticated or no token')\n      return\n    }\n\n    try {\n      setIsLoadingCurrent(true)\n      const organisation = await apiService.getCurrentOrganisation()\n      setCurrentOrganisation(organisation)\n    } catch (error: any) {\n      console.error('Failed to load current organisation:', error)\n      \n      // If it's an authentication error, don't show it as a critical error\n      if (error?.response?.status === 401 || error?.response?.status === 403) {\n        console.warn('Authentication issue loading current organisation, user may need to re-login')\n      }\n      \n      setCurrentOrganisation(null)\n    } finally {\n      setIsLoadingCurrent(false)\n    }\n  }\n\n  const refreshAllOrganisations = async () => {\n    if (!isSuperAdmin || !isAuthenticated || !authService.getToken()) {\n      console.warn('Cannot load all organisations: not super admin, not authenticated, or no token')\n      return\n    }\n\n    try {\n      setIsLoadingAll(true)\n      const organisations = await apiService.getAllOrganisations()\n      setAllOrganisations(organisations)\n    } catch (error: any) {\n      console.error('Failed to load all organisations:', error)\n      \n      // If it's an authentication error, don't show it as a critical error\n      if (error?.response?.status === 401 || error?.response?.status === 403) {\n        console.warn('Authentication issue loading all organisations, user may need to re-login')\n      }\n      \n      setAllOrganisations([])\n    } finally {\n      setIsLoadingAll(false)\n    }\n  }\n\n  const createOrganisation = async (data: any): Promise<Organisation> => {\n    if (!isSuperAdmin) {\n      throw new Error('Only Super Admins can create organisations')\n    }\n\n    try {\n      const newOrganisation = await apiService.createOrganisation(data)\n      \n      // Refresh the list after creation\n      await refreshAllOrganisations()\n      await refreshAccessibleOrganisations()\n      \n      return newOrganisation\n    } catch (error) {\n      console.error('Failed to create organisation:', error)\n      throw error\n    }\n  }\n\n  const refreshAccessibleOrganisations = async () => {\n    if (!isAuthenticated || !authService.getToken()) {\n      console.warn('Cannot load accessible organisations: not authenticated or no token')\n      return\n    }\n\n    try {\n      setIsLoadingAccessible(true)\n      \n      // For Super Admin, accessible orgs are all orgs\n      if (isSuperAdmin) {\n        const organisations = await apiService.getAllOrganisations()\n        setAccessibleOrganisations(organisations)\n      } else {\n        // For regular users, get organizations they have access to\n        const organisations = await apiService.getUserAccessibleOrganisations()\n        setAccessibleOrganisations(organisations)\n      }\n    } catch (error: any) {\n      console.error('Failed to load accessible organisations:', error)\n      \n      // If it's an authentication error, don't show it as a critical error\n      if (error?.response?.status === 401 || error?.response?.status === 403) {\n        console.warn('Authentication issue loading organisations, user may need to re-login')\n      } else if (error?.response?.status === 400) {\n        console.error('Backend API error: organisations/accessible endpoint has implementation issues')\n        console.warn('This is likely a backend bug - missing service method or incorrect role comparison')\n        // For now, fallback to empty list to prevent app crash\n      }\n      \n      setAccessibleOrganisations([])\n    } finally {\n      setIsLoadingAccessible(false)\n    }\n  }\n\n  const switchOrganisation = async (orgId: string) => {\n    if (!isAuthenticated) return\n\n    try {\n      setIsSwitching(true)\n      \n      // Validate user has access to this organization\n      const hasAccess = accessibleOrganisations.some(org => org.id === orgId)\n      if (!hasAccess) {\n        throw new Error('You do not have access to this organization')\n      }\n\n      // Clear any cached data from previous organization context\n      if (typeof window !== 'undefined') {\n        // Clear any organization-specific cache keys\n        const keysToRemove = []\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i)\n          if (key && (key.includes('org_') || key.includes('tenant_'))) {\n            keysToRemove.push(key)\n          }\n        }\n        keysToRemove.forEach(key => localStorage.removeItem(key))\n      }\n\n      // Set the new organization context\n      const targetOrg = accessibleOrganisations.find(org => org.id === orgId)\n      if (targetOrg) {\n        setCurrentOrganisation(targetOrg)\n        \n        // Persist selection\n        if (typeof window !== 'undefined') {\n          localStorage.setItem('selectedOrganisationId', orgId)\n        }\n\n        // Update API service organization context\n        apiService.setOrganizationContext(orgId)\n\n        // Audit log the organization switch\n        try {\n          await apiService.logOrganizationSwitch(orgId)\n        } catch (auditError) {\n          console.warn('Failed to log organization switch:', auditError)\n          // Don't fail the switch if audit logging fails\n        }\n\n        // Trigger data refresh for current page\n        window.dispatchEvent(new CustomEvent('organizationChanged', { \n          detail: { organizationId: orgId, organization: targetOrg } \n        }))\n      }\n    } catch (error) {\n      console.error('Failed to switch organisation:', error)\n      throw error\n    } finally {\n      setIsSwitching(false)\n    }\n  }\n\n  const contextValue: OrganisationContextType = {\n    currentOrganisation,\n    allOrganisations,\n    availableIndustries,\n    accessibleOrganisations,\n    isLoadingCurrent,\n    isLoadingAll,\n    isLoadingIndustries,\n    isLoadingAccessible,\n    isSwitching,\n    refreshCurrentOrganisation,\n    refreshAllOrganisations,\n    createOrganisation,\n    switchOrganisation,\n    refreshAccessibleOrganisations,\n    canManageOrganisations,\n    isSuperAdmin\n  }\n\n  return (\n    <OrganisationContext.Provider value={contextValue}>\n      {children}\n    </OrganisationContext.Provider>\n  )\n}"],"names":["OrganisationProvider","useOrganisationContext","OrganisationContext","createContext","undefined","context","useContext","Error","children","user","isAuthenticated","hasRole","useAuthContext","currentOrganisation","setCurrentOrganisation","useState","allOrganisations","setAllOrganisations","availableIndustries","setAvailableIndustries","accessibleOrganisations","setAccessibleOrganisations","isLoadingCurrent","setIsLoadingCurrent","isLoadingAll","setIsLoadingAll","isLoadingIndustries","setIsLoadingIndustries","isLoadingAccessible","setIsLoadingAccessible","isSwitching","setIsSwitching","isSuperAdmin","setIsSuperAdmin","canManageOrganisations","setCanManageOrganisations","lastLoadTime","setLastLoadTime","useEffect","adminStatus","id","role","window","savedOrgId","localStorage","getItem","now","Date","console","warn","authService","getToken","log","loadAvailableIndustries","refreshAccessibleOrganisations","refreshCurrentOrganisation","refreshAllOrganisations","industries","apiService","getAvailableIndustries","error","organisation","getCurrentOrganisation","response","status","organisations","getAllOrganisations","createOrganisation","data","newOrganisation","getUserAccessibleOrganisations","switchOrganisation","orgId","hasAccess","some","org","keysToRemove","i","length","key","includes","push","forEach","removeItem","targetOrg","find","setItem","setOrganizationContext","logOrganizationSwitch","auditError","dispatchEvent","CustomEvent","detail","organizationId","organization","contextValue","Provider","value"],"mappings":"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"}