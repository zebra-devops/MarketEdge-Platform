7ae123df55ba029f461b24ec4dadf92e
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return FeatureFlaggedContent;
    },
    useFeatureFlaggedRender: function() {
        return useFeatureFlaggedRender;
    },
    withFeatureFlag: function() {
        return withFeatureFlag;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _useFeatureFlags = require("../../hooks/useFeatureFlags");
const _LoadingSpinner = /*#__PURE__*/ _interop_require_default(require("./LoadingSpinner"));
const _PlaceholderContent = /*#__PURE__*/ _interop_require_default(require("./PlaceholderContent"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function FeatureFlaggedContent({ flagKey, children, fallback, loadingComponent, errorComponent, fallbackValue = false, className = "", enabledComponent, disabledComponent, placeholderTitle, placeholderDescription, placeholderType = "info", placeholderIcon }) {
    const { isEnabled, isLoading, error, config } = (0, _useFeatureFlags.useFeatureFlag)(flagKey, {
        fallbackValue
    });
    // Loading state
    if (isLoading) {
        if (loadingComponent) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                children: loadingComponent
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: `flex items-center justify-center p-8 ${className}`,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                size: "lg"
            })
        });
    }
    // Error state
    if (error && !isEnabled) {
        if (errorComponent) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                children: errorComponent
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: className,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_PlaceholderContent.default, {
                title: "Feature Unavailable",
                description: "This feature is currently unavailable. Please try again later.",
                type: "warning"
            })
        });
    }
    const wrapperProps = {
        className,
        "data-feature-flag": flagKey,
        "data-feature-enabled": isEnabled
    };
    // Feature is enabled
    if (isEnabled) {
        if (enabledComponent) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...wrapperProps,
                children: enabledComponent
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ...wrapperProps,
            children: children
        });
    }
    // Feature is disabled
    if (disabledComponent) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ...wrapperProps,
            children: disabledComponent
        });
    }
    if (fallback) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ...wrapperProps,
            children: fallback
        });
    }
    // Default placeholder when disabled
    if (placeholderTitle && placeholderDescription) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ...wrapperProps,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_PlaceholderContent.default, {
                title: placeholderTitle,
                description: placeholderDescription,
                type: placeholderType,
                icon: placeholderIcon
            })
        });
    }
    // No fallback specified, render nothing
    return null;
}
function withFeatureFlag(Component, flagKey, options = {}) {
    const WrappedComponent = (props)=>{
        const { isEnabled, isLoading, error } = (0, _useFeatureFlags.useFeatureFlag)(flagKey, {
            fallbackValue: options.fallbackValue ?? false
        });
        if (isLoading && options.loadingComponent) {
            const LoadingComponent = options.loadingComponent;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(LoadingComponent, {});
        }
        if (isLoading) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                size: "lg"
            });
        }
        if (error && options.errorComponent) {
            const ErrorComponent = options.errorComponent;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorComponent, {});
        }
        if (!isEnabled && options.fallback) {
            const FallbackComponent = options.fallback;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(FallbackComponent, {
                ...props
            });
        }
        if (!isEnabled) {
            return null;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
            ...props
        });
    };
    WrappedComponent.displayName = `withFeatureFlag(${Component.displayName || Component.name})`;
    return WrappedComponent;
}
function useFeatureFlaggedRender() {
    return {
        renderIfEnabled: (flagKey, component, fallback)=>{
            const { isEnabled } = (0, _useFeatureFlags.useFeatureFlag)(flagKey);
            return isEnabled ? component : fallback || null;
        },
        renderIfAllEnabled: (flagKeys, component, fallback)=>{
            // This would require a custom hook to check multiple flags
            // For now, we'll use the first flag as an example
            const { isEnabled } = (0, _useFeatureFlags.useFeatureFlag)(flagKeys[0]);
            return isEnabled ? component : fallback || null;
        },
        renderIfAnyEnabled: (flagKeys, component, fallback)=>{
            // This would require a custom hook to check multiple flags
            // For now, we'll use the first flag as an example
            const { isEnabled } = (0, _useFeatureFlags.useFeatureFlag)(flagKeys[0]);
            return isEnabled ? component : fallback || null;
        }
    };
}

//# sourceMappingURL=data:application/json;base64,