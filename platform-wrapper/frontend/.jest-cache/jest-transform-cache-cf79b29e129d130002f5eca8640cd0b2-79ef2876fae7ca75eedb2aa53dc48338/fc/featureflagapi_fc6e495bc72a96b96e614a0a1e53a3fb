2455000ce0223881dbc8417cab450a98
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "featureFlagApiService", {
    enumerable: true,
    get: function() {
        return featureFlagApiService;
    }
});
const _api = require("./api");
const _featureflags = require("../types/feature-flags");
class FeatureFlagApiService {
    /**
   * Check if a specific feature flag is enabled for the current user
   */ async checkFeatureFlag(flagKey) {
        try {
            const response = await _api.apiService.get(`/features/${flagKey}`);
            return response;
        } catch (error) {
            // Convert API errors to FeatureFlagError
            if (error.response?.status === 404) {
                throw new _featureflags.FeatureFlagError(`Feature flag '${flagKey}' not found`, flagKey, 404);
            }
            if (error.response?.status === 403) {
                throw new _featureflags.FeatureFlagError(`Access denied for feature flag '${flagKey}'`, flagKey, 403);
            }
            throw new _featureflags.FeatureFlagError(error.message || `Failed to check feature flag '${flagKey}'`, flagKey, error.response?.status);
        }
    }
    /**
   * Get all enabled features for the current user
   */ async getEnabledFeatures(moduleId) {
        try {
            const url = moduleId ? `/features/enabled?module_id=${moduleId}` : "/features/enabled";
            const response = await _api.apiService.get(url);
            return response;
        } catch (error) {
            throw new _featureflags.FeatureFlagError(error.message || "Failed to get enabled features", undefined, error.response?.status);
        }
    }
    /**
   * Batch check multiple feature flags
   */ async checkMultipleFlags(flagKeys) {
        try {
            // Since the backend doesn't have a bulk endpoint, we'll make parallel requests
            const promises = flagKeys.map(async (flagKey)=>{
                try {
                    const result = await this.checkFeatureFlag(flagKey);
                    return {
                        flagKey,
                        result
                    };
                } catch (error) {
                    // Return disabled for non-existent flags instead of throwing
                    if (error instanceof _featureflags.FeatureFlagError && error.statusCode === 404) {
                        return {
                            flagKey,
                            result: {
                                flag_key: flagKey,
                                enabled: false,
                                user_id: "",
                                reason: "Flag not found"
                            }
                        };
                    }
                    throw error;
                }
            });
            const results = await Promise.all(promises);
            // Convert to record format
            return results.reduce((acc, { flagKey, result })=>{
                acc[flagKey] = result;
                return acc;
            }, {});
        } catch (error) {
            throw new _featureflags.FeatureFlagError(error.message || "Failed to check multiple feature flags", undefined, error.response?.status);
        }
    }
    /**
   * Preload flags into cache (for performance)
   */ async preloadFlags(flagKeys) {
        try {
            // Fire parallel requests without waiting for results
            // This helps with cache warming
            flagKeys.forEach((flagKey)=>{
                this.checkFeatureFlag(flagKey).catch((error)=>{
                    // Silently fail for preloading - we don't want to break the app
                    console.warn(`Failed to preload flag '${flagKey}':`, error.message);
                });
            });
        } catch (error) {
            // Silent failure for preloading
            console.warn("Failed to preload flags:", error);
        }
    }
    /**
   * Health check for feature flag service
   */ async healthCheck() {
        try {
            // Try to get enabled features as a health check
            await this.getEnabledFeatures();
            return {
                status: "healthy",
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            return {
                status: "degraded",
                timestamp: new Date().toISOString()
            };
        }
    }
}
const featureFlagApiService = new FeatureFlagApiService();

//# sourceMappingURL=data:application/json;base64,