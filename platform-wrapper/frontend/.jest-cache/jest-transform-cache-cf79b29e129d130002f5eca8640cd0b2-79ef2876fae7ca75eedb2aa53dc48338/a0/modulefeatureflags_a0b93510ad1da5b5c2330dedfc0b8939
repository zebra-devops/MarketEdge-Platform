6eb4fe91f378f14999f212ad20d99d7b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ModuleFeatureFlagError", {
    enumerable: true,
    get: function() {
        return ModuleFeatureFlagError;
    }
});
class ModuleFeatureFlagError extends Error {
    constructor(message, moduleId, flagKeys, statusCode){
        super(message);
        this.moduleId = moduleId;
        this.flagKeys = flagKeys;
        this.statusCode = statusCode;
        this.name = "ModuleFeatureFlagError";
    }
}

//# sourceMappingURL=data:application/json;base64,