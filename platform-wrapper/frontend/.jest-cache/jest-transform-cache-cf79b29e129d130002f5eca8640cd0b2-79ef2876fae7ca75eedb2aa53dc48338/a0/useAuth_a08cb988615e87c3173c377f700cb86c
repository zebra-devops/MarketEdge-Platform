7d3f658a6c037295ffe20e8ea909927a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthContext: function() {
        return AuthContext;
    },
    useAuth: function() {
        return useAuth;
    },
    useAuthContext: function() {
        return useAuthContext;
    }
});
const _react = require("react");
const _auth = require("../services/auth");
const _applicationaccess = require("../utils/application-access");
const AuthContext = (0, _react.createContext)(undefined);
const useAuthContext = ()=>{
    const context = (0, _react.useContext)(AuthContext);
    if (!context) {
        throw new Error("useAuthContext must be used within an AuthProvider");
    }
    return context;
};
const useAuth = ()=>{
    const [state, setState] = (0, _react.useState)({
        user: null,
        tenant: null,
        permissions: [],
        isLoading: true,
        isAuthenticated: false,
        isInitialized: false
    });
    (0, _react.useEffect)(()=>{
        initializeAuth();
    }, []);
    // Initialize timer-based features only on client-side after mount
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined") {
            // PRODUCTION FIX: Simplified timer initialization
            console.log("Initializing auth services with native timer support");
            // Initialize auto-refresh and activity tracking
            _auth.authService.initializeAutoRefresh();
            _auth.authService.initializeActivityTracking();
            // Cleanup function to clear intervals when component unmounts
            return ()=>{
                const refreshInterval = window.__authRefreshInterval;
                const timeoutInterval = window.__sessionTimeoutInterval;
                if (refreshInterval) {
                    try {
                        if (typeof window.clearInterval === "function") {
                            window.clearInterval(refreshInterval);
                        }
                        delete window.__authRefreshInterval;
                    } catch (error) {
                        console.warn("Error clearing refresh interval in cleanup:", error);
                    }
                }
                if (timeoutInterval) {
                    try {
                        if (typeof window.clearInterval === "function") {
                            window.clearInterval(timeoutInterval);
                        }
                        delete window.__sessionTimeoutInterval;
                    } catch (error) {
                        console.warn("Error clearing timeout interval in cleanup:", error);
                    }
                }
            };
        }
    }, [
        state.isAuthenticated
    ]) // Re-initialize when auth state changes
    ;
    const initializeAuth = async ()=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true
                }));
            // Check if user has valid authentication
            if (_auth.authService.isAuthenticated()) {
                try {
                    // Get current user data from backend
                    const userResponse = await _auth.authService.getCurrentUser();
                    const permissions = _auth.authService.getUserPermissions ? _auth.authService.getUserPermissions() : [];
                    setState({
                        user: userResponse.user || userResponse,
                        tenant: userResponse.tenant || null,
                        permissions,
                        isLoading: false,
                        isAuthenticated: true,
                        isInitialized: true
                    });
                } catch (error) {
                    console.error("Failed to get current user:", error);
                    // Clear invalid tokens
                    await _auth.authService.logout();
                    setState({
                        user: null,
                        tenant: null,
                        permissions: [],
                        isLoading: false,
                        isAuthenticated: false,
                        isInitialized: true
                    });
                }
            } else {
                setState({
                    user: null,
                    tenant: null,
                    permissions: [],
                    isLoading: false,
                    isAuthenticated: false,
                    isInitialized: true
                });
            }
        } catch (error) {
            console.error("Auth initialization failed:", error);
            setState({
                user: null,
                tenant: null,
                permissions: [],
                isLoading: false,
                isAuthenticated: false,
                isInitialized: true
            });
        }
    };
    const login = async (loginData)=>{
        setState((prev)=>({
                ...prev,
                isLoading: true
            }));
        try {
            const response = await _auth.authService.login(loginData);
            setState({
                user: response.user || response,
                tenant: response.tenant || null,
                permissions: response.permissions || [],
                isLoading: false,
                isAuthenticated: true,
                isInitialized: true
            });
            return response;
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    user: null,
                    tenant: null,
                    permissions: [],
                    isAuthenticated: false
                }));
            throw error;
        }
    };
    const logout = async (allDevices = false)=>{
        setState((prev)=>({
                ...prev,
                isLoading: true
            }));
        try {
            await _auth.authService.logout(allDevices);
        } catch (error) {
            console.warn("Logout error:", error);
        } finally{
            setState({
                user: null,
                tenant: null,
                permissions: [],
                isLoading: false,
                isAuthenticated: false,
                isInitialized: true
            });
        }
    };
    const refreshUser = async ()=>{
        try {
            const userResponse = await _auth.authService.getCurrentUser();
            const permissions = _auth.authService.getUserPermissions ? _auth.authService.getUserPermissions() : [];
            setState((prev)=>({
                    ...prev,
                    user: userResponse.user || userResponse,
                    tenant: userResponse.tenant || null,
                    permissions
                }));
        } catch (error) {
            console.error("Failed to refresh user data:", error);
            // Clear auth state on refresh failure
            setState((prev)=>({
                    ...prev,
                    user: null,
                    tenant: null,
                    permissions: [],
                    isAuthenticated: false
                }));
            await _auth.authService.logout();
            throw error;
        }
    };
    const hasPermission = (permission)=>{
        return _auth.authService.hasPermission ? _auth.authService.hasPermission(permission) : false;
    };
    const hasAnyPermission = (permissions)=>{
        return _auth.authService.hasAnyPermission ? _auth.authService.hasAnyPermission(permissions) : false;
    };
    const hasRole = (role)=>{
        return _auth.authService.getUserRole ? _auth.authService.getUserRole() === role : false;
    };
    const checkSession = async ()=>{
        try {
            return _auth.authService.checkSession ? await _auth.authService.checkSession() : {
                valid: true
            };
        } catch (error) {
            console.error("Session check failed:", error);
            throw error;
        }
    };
    const extendSession = async ()=>{
        try {
            return _auth.authService.extendSession ? await _auth.authService.extendSession() : {
                extended: true
            };
        } catch (error) {
            console.error("Session extension failed:", error);
            throw error;
        }
    };
    const getTenantContext = ()=>{
        return state.tenant;
    };
    const validateTenantAccess = (requiredTenant)=>{
        if (!state.tenant || !state.isAuthenticated) {
            return false;
        }
        return state.tenant.id === requiredTenant;
    };
    const hasApplicationAccess = (application)=>{
        return (0, _applicationaccess.hasApplicationAccess)(state.user?.application_access, application);
    };
    const getAccessibleApplications = ()=>{
        return (0, _applicationaccess.getAccessibleApplications)(state.user?.application_access);
    };
    return {
        ...state,
        login,
        logout,
        refreshUser,
        hasPermission,
        hasAnyPermission,
        hasRole,
        checkSession,
        extendSession,
        getTenantContext,
        validateTenantAccess,
        hasApplicationAccess,
        getAccessibleApplications
    };
};

//# sourceMappingURL=data:application/json;base64,