{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/types/module-feature-flags.ts"],"sourcesContent":["import { FeatureFlag } from './feature-flags'\n\n// Core module-feature flag types\nexport interface ModuleFeatureFlag extends FeatureFlag {\n  module_id: string\n  hierarchy_level: 'global' | 'module' | 'feature' | 'capability'\n  parent_flag?: string\n  child_flags?: string[]\n  is_inherited?: boolean\n  inheritance_source?: string\n}\n\nexport interface AnalyticsModule {\n  id: string\n  name: string\n  description: string\n  version: string\n  module_type: string\n  status: 'active' | 'testing' | 'development' | 'deprecated' | 'disabled'\n  is_core: boolean\n  requires_license: boolean\n  pricing_tier?: string\n  dependencies: string[]\n  created_at: string\n  updated_at: string\n  \n  // Feature flag integration\n  feature_flags: ModuleFeatureFlag[]\n  required_flags: string[]\n  optional_flags: string[]\n  flag_namespace: string\n  capabilities: ModuleCapability[]\n}\n\nexport interface ModuleCapability {\n  id: string\n  name: string\n  description: string\n  flag_key: string\n  is_required: boolean\n  config_schema?: Record<string, any>\n  dependencies?: string[]\n}\n\n// API request/response types\nexport interface ModuleFeatureFlagResponse {\n  module: AnalyticsModule\n  enabled_flags: Record<string, {\n    flag_key: string\n    enabled: boolean\n    config: Record<string, any>\n    inherited_from?: string\n  }>\n  available_capabilities: string[]\n  disabled_capabilities: string[]\n  health_status: 'healthy' | 'degraded' | 'unavailable'\n}\n\nexport interface ModuleFeatureFlagLinkRequest {\n  flag_keys: string[]\n  flag_mappings: Record<string, {\n    flag_key: string\n    capability?: string\n    is_required: boolean\n    default_config?: Record<string, any>\n  }>\n  namespace_prefix?: string\n}\n\nexport interface ModuleDiscoveryResponse {\n  enabled_modules: Array<{\n    module_id: string\n    name: string\n    version: string\n    status: string\n    capabilities: string[]\n    feature_flags: Record<string, boolean>\n    config: Record<string, any>\n    health: 'healthy' | 'degraded' | 'unavailable'\n  }>\n  disabled_modules: Array<{\n    module_id: string\n    name: string\n    reason: string\n    missing_flags: string[]\n    can_enable: boolean\n  }>\n  total_available: number\n  user_accessible: number\n}\n\nexport interface ModuleFlagHierarchy {\n  module_id: string\n  hierarchy: {\n    global: Array<{\n      flag_key: string\n      name: string\n      enabled: boolean\n      affects_module: boolean\n    }>\n    module: Array<{\n      flag_key: string\n      name: string\n      enabled: boolean\n      overrides_global: boolean\n      parent_flag?: string\n    }>\n    features: Record<string, Array<{\n      flag_key: string\n      name: string\n      enabled: boolean\n      capability: string\n      parent_flag?: string\n    }>>\n    capabilities: Record<string, Array<{\n      flag_key: string\n      name: string\n      enabled: boolean\n      config: Record<string, any>\n      parent_flag?: string\n    }>>\n  }\n  effective_flags: Record<string, {\n    enabled: boolean\n    source: 'global' | 'module' | 'feature' | 'capability'\n    config: Record<string, any>\n  }>\n  inheritance_chain: Array<{\n    level: string\n    flag_key: string\n    enabled: boolean\n    overridden_by?: string\n  }>\n}\n\nexport interface BulkModuleFlagOperation {\n  action: 'enable' | 'disable' | 'configure'\n  module_ids: string[]\n  flag_pattern?: string // e.g., \"*.enabled\" or \"module.{module_id}.*\"\n  config?: Record<string, any>\n  scope?: 'global' | 'organisation' | 'sector' | 'user'\n  rollout_percentage?: number\n}\n\n// Hook types for module feature flags\nexport interface UseModuleFeatureFlagsResult {\n  moduleFlags: Record<string, boolean>\n  moduleConfigs: Record<string, Record<string, any>>\n  isLoading: boolean\n  error: Error | null\n  enabledModules: string[]\n  disabledModules: string[]\n  moduleCapabilities: Record<string, string[]>\n  refetch: () => void\n  lastUpdated?: Date\n}\n\nexport interface UseModuleDiscoveryResult {\n  enabledModules: ModuleDiscoveryResponse['enabled_modules']\n  disabledModules: ModuleDiscoveryResponse['disabled_modules']\n  isLoading: boolean\n  error: Error | null\n  totalAvailable: number\n  userAccessible: number\n  refresh: () => void\n  lastUpdated?: Date\n}\n\nexport interface UseModuleFlagHierarchyResult {\n  hierarchy: ModuleFlagHierarchy | null\n  effectiveFlags: Record<string, boolean>\n  flagConfigs: Record<string, Record<string, any>>\n  isLoading: boolean\n  error: Error | null\n  getInheritanceChain: (flagKey: string) => ModuleFlagHierarchy['inheritance_chain']\n  refetch: () => void\n}\n\n// Context types\nexport interface ModuleFeatureFlagContextType {\n  // Module availability\n  isModuleEnabled: (moduleId: string) => boolean\n  getEnabledModules: () => string[]\n  getModuleCapabilities: (moduleId: string) => string[]\n  \n  // Module-specific flags\n  isModuleFlagEnabled: (moduleId: string, flagKey: string) => boolean\n  getModuleFlagConfig: (moduleId: string, flagKey: string) => Record<string, any> | null\n  \n  // Capability checks\n  hasModuleCapability: (moduleId: string, capability: string) => boolean\n  getCapabilityConfig: (moduleId: string, capability: string) => Record<string, any> | null\n  \n  // Hierarchy navigation\n  getEffectiveFlags: (moduleId: string) => Record<string, boolean>\n  getFlagSource: (moduleId: string, flagKey: string) => 'global' | 'module' | 'feature' | 'capability' | null\n  \n  // Cache management\n  invalidateModule: (moduleId: string) => void\n  refreshModuleDiscovery: () => void\n  \n  // State\n  isDiscovering: boolean\n  discoveryError?: Error\n  lastDiscovery?: Date\n}\n\n// Configuration types\nexport interface ModuleFeatureFlagOptions {\n  // Module filtering\n  includeDisabled?: boolean\n  moduleTypes?: string[]\n  categories?: string[]\n  \n  // Flag filtering\n  requiredFlagsOnly?: boolean\n  includeInherited?: boolean\n  hierarchyDepth?: number\n  \n  // Caching\n  cacheTime?: number\n  staleTime?: number\n  refetchInterval?: number | false\n  \n  // Performance\n  preloadCapabilities?: boolean\n  batchSize?: number\n}\n\n// Error types\nexport class ModuleFeatureFlagError extends Error {\n  constructor(\n    message: string,\n    public readonly moduleId?: string,\n    public readonly flagKeys?: string[],\n    public readonly statusCode?: number\n  ) {\n    super(message)\n    this.name = 'ModuleFeatureFlagError'\n  }\n}\n\n// Event types for real-time updates\nexport interface ModuleFeatureFlagUpdateEvent {\n  type: 'module_enabled' | 'module_disabled' | 'module_configured' | 'flags_updated' | 'capabilities_changed'\n  module_id: string\n  affected_flags?: string[]\n  affected_capabilities?: string[]\n  previous_state?: Record<string, any>\n  new_state: Record<string, any>\n  timestamp: string\n  user_id?: string\n  organisation_id?: string\n}\n\n// Administrative types\nexport interface ModuleFlagTemplate {\n  module_id: string\n  template_version: string\n  flags: Array<{\n    flag_key: string\n    name: string\n    description: string\n    hierarchy_level: 'global' | 'module' | 'feature' | 'capability'\n    is_required: boolean\n    default_enabled: boolean\n    default_config: Record<string, any>\n    scope_recommendations: string[]\n    rollout_strategy?: 'immediate' | 'gradual' | 'user_controlled'\n  }>\n  capabilities: Array<{\n    capability_name: string\n    required_flags: string[]\n    optional_flags: string[]\n    config_schema: Record<string, any>\n  }>\n}\n\nexport interface ModuleHealthReport {\n  module_id: string\n  overall_health: 'healthy' | 'degraded' | 'unavailable'\n  flag_health: Record<string, {\n    status: 'enabled' | 'disabled' | 'error'\n    last_checked: string\n    error_message?: string\n  }>\n  dependency_health: Record<string, boolean>\n  performance_metrics: {\n    avg_response_time: number\n    success_rate: number\n    error_rate: number\n    last_24h_requests: number\n  }\n  recommendations: Array<{\n    type: 'performance' | 'reliability' | 'configuration'\n    priority: 'high' | 'medium' | 'low'\n    message: string\n    action?: string\n  }>\n  last_health_check: string\n}"],"names":["ModuleFeatureFlagError","Error","constructor","message","moduleId","flagKeys","statusCode","name"],"mappings":";;;;+BAsOaA;;;eAAAA;;;AAAN,MAAMA,+BAA+BC;IAC1CC,YACEC,OAAe,EACf,AAAgBC,QAAiB,EACjC,AAAgBC,QAAmB,EACnC,AAAgBC,UAAmB,CACnC;QACA,KAAK,CAACH;aAJUC,WAAAA;aACAC,WAAAA;aACAC,aAAAA;QAGhB,IAAI,CAACC,IAAI,GAAG;IACd;AACF"}