{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/module-feature-flag-api.ts"],"sourcesContent":["import { apiService } from './api'\nimport { \n  ModuleFeatureFlagResponse,\n  ModuleFeatureFlagLinkRequest,\n  ModuleDiscoveryResponse,\n  ModuleFlagHierarchy,\n  BulkModuleFlagOperation,\n  ModuleFeatureFlagError\n} from '@/types/module-feature-flags'\n\nclass ModuleFeatureFlagApiService {\n  /**\n   * Get all modules with their associated feature flags\n   */\n  async getModulesWithFlags(): Promise<ModuleFeatureFlagResponse[]> {\n    try {\n      const response = await apiService.get<{ modules: ModuleFeatureFlagResponse[] }>('/admin/modules/flags')\n      return response.modules || []\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || 'Failed to get modules with flags',\n        undefined,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Link a module to feature flags\n   */\n  async linkModuleToFlags(\n    moduleId: string, \n    request: ModuleFeatureFlagLinkRequest\n  ): Promise<ModuleFeatureFlagResponse> {\n    try {\n      const response = await apiService.put<ModuleFeatureFlagResponse>(\n        `/admin/modules/${moduleId}/flags`,\n        request\n      )\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to link module '${moduleId}' to flags`,\n        moduleId,\n        request.flag_keys,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Get feature flag-driven module discovery\n   * Only returns modules that are enabled via feature flags\n   */\n  async discoverEnabledModules(\n    userId?: string,\n    organisationId?: string\n  ): Promise<ModuleDiscoveryResponse> {\n    try {\n      const params = new URLSearchParams()\n      if (userId) params.append('user_id', userId)\n      if (organisationId) params.append('organisation_id', organisationId)\n      \n      const url = `/modules/discovery${params.toString() ? '?' + params.toString() : ''}`\n      const response = await apiService.get<ModuleDiscoveryResponse>(url)\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || 'Failed to discover enabled modules',\n        undefined,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Get module-specific feature flags with hierarchy\n   */\n  async getModuleFlagHierarchy(moduleId: string): Promise<ModuleFlagHierarchy> {\n    try {\n      const response = await apiService.get<ModuleFlagHierarchy>(`/modules/${moduleId}/flags/hierarchy`)\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to get flag hierarchy for module '${moduleId}'`,\n        moduleId,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Bulk enable/disable modules via feature flags\n   */\n  async bulkModuleOperation(operation: BulkModuleFlagOperation): Promise<void> {\n    try {\n      await apiService.post('/admin/modules/bulk-flags', operation)\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || 'Failed to perform bulk module operation',\n        undefined,\n        operation.module_ids,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Get available modules based on user's feature flag access\n   */\n  async getUserAccessibleModules(): Promise<ModuleDiscoveryResponse> {\n    try {\n      const response = await apiService.get<ModuleDiscoveryResponse>('/modules/accessible')\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || 'Failed to get user accessible modules',\n        undefined,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Check if specific module capabilities are enabled\n   */\n  async checkModuleCapabilities(\n    moduleId: string,\n    capabilities: string[]\n  ): Promise<Record<string, boolean>> {\n    try {\n      const response = await apiService.post<{ capabilities: Record<string, boolean> }>(\n        `/modules/${moduleId}/capabilities/check`,\n        { capabilities }\n      )\n      return response.capabilities || {}\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to check capabilities for module '${moduleId}'`,\n        moduleId,\n        capabilities,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Generate module-specific feature flag templates\n   */\n  async generateModuleFlagTemplate(moduleId: string): Promise<{\n    template: {\n      flag_key: string\n      name: string\n      description: string\n      scope: string\n      config: Record<string, any>\n    }[]\n  }> {\n    try {\n      const response = await apiService.get<{\n        template: {\n          flag_key: string\n          name: string\n          description: string\n          scope: string\n          config: Record<string, any>\n        }[]\n      }>(`/admin/modules/${moduleId}/flag-template`)\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to generate flag template for module '${moduleId}'`,\n        moduleId,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Validate module-flag configuration\n   */\n  async validateModuleFlags(\n    moduleId: string,\n    flagKeys: string[]\n  ): Promise<{\n    valid: boolean\n    issues: Array<{\n      flag_key: string\n      issue: string\n      severity: 'error' | 'warning'\n      suggestion?: string\n    }>\n  }> {\n    try {\n      const response = await apiService.post<{\n        valid: boolean\n        issues: Array<{\n          flag_key: string\n          issue: string\n          severity: 'error' | 'warning'\n          suggestion?: string\n        }>\n      }>(`/admin/modules/${moduleId}/validate-flags`, { flag_keys: flagKeys })\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to validate flags for module '${moduleId}'`,\n        moduleId,\n        flagKeys,\n        error.response?.status\n      )\n    }\n  }\n\n  /**\n   * Get module health including feature flag dependencies\n   */\n  async getModuleHealth(moduleId: string): Promise<{\n    module_id: string\n    status: 'healthy' | 'degraded' | 'unavailable'\n    flag_health: Array<{\n      flag_key: string\n      status: 'enabled' | 'disabled' | 'error'\n      last_checked: string\n    }>\n    dependencies_met: boolean\n    optional_flags: number\n    required_flags: number\n    enabled_flags: number\n  }> {\n    try {\n      const response = await apiService.get<{\n        module_id: string\n        status: 'healthy' | 'degraded' | 'unavailable'\n        flag_health: Array<{\n          flag_key: string\n          status: 'enabled' | 'disabled' | 'error'\n          last_checked: string\n        }>\n        dependencies_met: boolean\n        optional_flags: number\n        required_flags: number\n        enabled_flags: number\n      }>(`/modules/${moduleId}/health`)\n      return response\n    } catch (error: any) {\n      throw new ModuleFeatureFlagError(\n        error.message || `Failed to get health for module '${moduleId}'`,\n        moduleId,\n        undefined,\n        error.response?.status\n      )\n    }\n  }\n}\n\nexport const moduleFeatureFlagApiService = new ModuleFeatureFlagApiService()"],"names":["moduleFeatureFlagApiService","ModuleFeatureFlagApiService","getModulesWithFlags","response","apiService","get","modules","error","ModuleFeatureFlagError","message","undefined","status","linkModuleToFlags","moduleId","request","put","flag_keys","discoverEnabledModules","userId","organisationId","params","URLSearchParams","append","url","toString","getModuleFlagHierarchy","bulkModuleOperation","operation","post","module_ids","getUserAccessibleModules","checkModuleCapabilities","capabilities","generateModuleFlagTemplate","validateModuleFlags","flagKeys","getModuleHealth"],"mappings":"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"}