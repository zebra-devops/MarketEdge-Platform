fcf33ceae33757fac3d4d24be3c6b395
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "moduleFeatureFlagApiService", {
    enumerable: true,
    get: function() {
        return moduleFeatureFlagApiService;
    }
});
const _api = require("./api");
const _modulefeatureflags = require("../types/module-feature-flags");
class ModuleFeatureFlagApiService {
    /**
   * Get all modules with their associated feature flags
   */ async getModulesWithFlags() {
        try {
            const response = await _api.apiService.get("/admin/modules/flags");
            return response.modules || [];
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || "Failed to get modules with flags", undefined, undefined, error.response?.status);
        }
    }
    /**
   * Link a module to feature flags
   */ async linkModuleToFlags(moduleId, request) {
        try {
            const response = await _api.apiService.put(`/admin/modules/${moduleId}/flags`, request);
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to link module '${moduleId}' to flags`, moduleId, request.flag_keys, error.response?.status);
        }
    }
    /**
   * Get feature flag-driven module discovery
   * Only returns modules that are enabled via feature flags
   */ async discoverEnabledModules(userId, organisationId) {
        try {
            const params = new URLSearchParams();
            if (userId) params.append("user_id", userId);
            if (organisationId) params.append("organisation_id", organisationId);
            const url = `/modules/discovery${params.toString() ? "?" + params.toString() : ""}`;
            const response = await _api.apiService.get(url);
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || "Failed to discover enabled modules", undefined, undefined, error.response?.status);
        }
    }
    /**
   * Get module-specific feature flags with hierarchy
   */ async getModuleFlagHierarchy(moduleId) {
        try {
            const response = await _api.apiService.get(`/modules/${moduleId}/flags/hierarchy`);
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to get flag hierarchy for module '${moduleId}'`, moduleId, undefined, error.response?.status);
        }
    }
    /**
   * Bulk enable/disable modules via feature flags
   */ async bulkModuleOperation(operation) {
        try {
            await _api.apiService.post("/admin/modules/bulk-flags", operation);
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || "Failed to perform bulk module operation", undefined, operation.module_ids, error.response?.status);
        }
    }
    /**
   * Get available modules based on user's feature flag access
   */ async getUserAccessibleModules() {
        try {
            const response = await _api.apiService.get("/modules/accessible");
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || "Failed to get user accessible modules", undefined, undefined, error.response?.status);
        }
    }
    /**
   * Check if specific module capabilities are enabled
   */ async checkModuleCapabilities(moduleId, capabilities) {
        try {
            const response = await _api.apiService.post(`/modules/${moduleId}/capabilities/check`, {
                capabilities
            });
            return response.capabilities || {};
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to check capabilities for module '${moduleId}'`, moduleId, capabilities, error.response?.status);
        }
    }
    /**
   * Generate module-specific feature flag templates
   */ async generateModuleFlagTemplate(moduleId) {
        try {
            const response = await _api.apiService.get(`/admin/modules/${moduleId}/flag-template`);
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to generate flag template for module '${moduleId}'`, moduleId, undefined, error.response?.status);
        }
    }
    /**
   * Validate module-flag configuration
   */ async validateModuleFlags(moduleId, flagKeys) {
        try {
            const response = await _api.apiService.post(`/admin/modules/${moduleId}/validate-flags`, {
                flag_keys: flagKeys
            });
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to validate flags for module '${moduleId}'`, moduleId, flagKeys, error.response?.status);
        }
    }
    /**
   * Get module health including feature flag dependencies
   */ async getModuleHealth(moduleId) {
        try {
            const response = await _api.apiService.get(`/modules/${moduleId}/health`);
            return response;
        } catch (error) {
            throw new _modulefeatureflags.ModuleFeatureFlagError(error.message || `Failed to get health for module '${moduleId}'`, moduleId, undefined, error.response?.status);
        }
    }
}
const moduleFeatureFlagApiService = new ModuleFeatureFlagApiService();

//# sourceMappingURL=data:application/json;base64,