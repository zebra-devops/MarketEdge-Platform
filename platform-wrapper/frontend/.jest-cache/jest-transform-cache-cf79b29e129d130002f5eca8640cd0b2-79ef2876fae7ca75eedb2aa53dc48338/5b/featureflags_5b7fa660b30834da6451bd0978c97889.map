{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/types/feature-flags.ts"],"sourcesContent":["import { User } from './auth'\n\n// Core feature flag types\nexport interface FeatureFlag {\n  id: string\n  flag_key: string\n  name: string\n  description?: string\n  is_enabled: boolean\n  rollout_percentage: number\n  scope: FeatureFlagScope\n  status: FeatureFlagStatus\n  config: Record<string, any>\n  allowed_sectors: string[]\n  blocked_sectors: string[]\n  module_id?: string\n  created_at: string\n  updated_at: string\n  created_by?: string\n  updated_by?: string\n}\n\nexport type FeatureFlagScope = 'global' | 'organisation' | 'sector' | 'user'\nexport type FeatureFlagStatus = 'active' | 'inactive' | 'deprecated'\n\n// API response types\nexport interface FeatureFlagEvaluationResponse {\n  flag_key: string\n  enabled: boolean\n  user_id: string\n  config?: Record<string, any>\n  reason?: string\n}\n\nexport interface EnabledFeaturesResponse {\n  enabled_features: Record<string, {\n    name: string\n    config: Record<string, any>\n    module_id?: string\n  }>\n  user_id: string\n  organisation_id: string\n}\n\n// Hook return types\nexport interface UseFeatureFlagResult {\n  isEnabled: boolean\n  isLoading: boolean\n  error: Error | null\n  config: Record<string, any> | null\n  refetch: () => void\n  lastUpdated?: Date\n}\n\nexport interface UseFeatureFlagsResult {\n  flags: Record<string, boolean>\n  isLoading: boolean\n  error: Error | null\n  configs: Record<string, Record<string, any>>\n  refetch: () => void\n  lastUpdated?: Date\n}\n\nexport interface UseAllFeatureFlagsResult {\n  allFlags: Record<string, {\n    enabled: boolean\n    name: string\n    config: Record<string, any>\n    module_id?: string\n  }>\n  isLoading: boolean\n  error: Error | null\n  refetch: () => void\n  lastUpdated?: Date\n}\n\n// Context types\nexport interface FeatureFlagContextType {\n  // Single flag evaluation\n  isFeatureEnabled: (flagKey: string) => boolean\n  getFeatureConfig: (flagKey: string) => Record<string, any> | null\n  \n  // Bulk operations\n  areAnyFeaturesEnabled: (flagKeys: string[]) => boolean\n  areAllFeaturesEnabled: (flagKeys: string[]) => boolean\n  getEnabledFeatures: () => string[]\n  \n  // Cache management\n  invalidateFlag: (flagKey: string) => void\n  invalidateAllFlags: () => void\n  preloadFlags: (flagKeys: string[]) => void\n  \n  // State\n  isInitialized: boolean\n  isLoading: boolean\n  lastUpdated?: Date\n}\n\n// Configuration types\nexport interface FeatureFlagOptions {\n  fallbackValue?: boolean\n  cacheTime?: number\n  staleTime?: number\n  refetchInterval?: number | false\n  refetchOnWindowFocus?: boolean\n  retryCount?: number\n  enabled?: boolean\n}\n\nexport interface FeatureFlagsOptions {\n  fallbackValues?: Record<string, boolean>\n  cacheTime?: number\n  staleTime?: number\n  refetchInterval?: number | false\n  refetchOnWindowFocus?: boolean\n  retryCount?: number\n  enabled?: boolean\n}\n\n// Utility types\nexport interface FeatureFlagWithResolvedHooks<T = any> extends React.ComponentType<T> {\n  displayName?: string\n}\n\nexport interface WithFeatureFlagProps {\n  featureFlags?: Record<string, boolean>\n  featureFlagsLoading?: boolean\n  featureFlagsError?: Error | null\n}\n\n// Error types\nexport class FeatureFlagError extends Error {\n  constructor(\n    message: string,\n    public readonly flagKey?: string,\n    public readonly statusCode?: number\n  ) {\n    super(message)\n    this.name = 'FeatureFlagError'\n  }\n}\n\n// Event types for real-time updates\nexport interface FeatureFlagUpdateEvent {\n  type: 'flag_updated' | 'flag_created' | 'flag_deleted' | 'bulk_update'\n  flagKey?: string\n  flags?: string[]\n  data?: Partial<FeatureFlag>\n  timestamp: string\n  userId?: string\n  organisationId?: string\n}\n\nexport interface UseFeatureFlagUpdatesResult {\n  subscribe: (flagKeys: string | string[]) => () => void\n  unsubscribe: (flagKeys: string | string[]) => void\n  isConnected: boolean\n  lastEvent?: FeatureFlagUpdateEvent\n  connectionError?: Error\n}\n\n// Local storage fallback types\nexport interface FeatureFlagCache {\n  flags: Record<string, {\n    enabled: boolean\n    config: Record<string, any>\n    timestamp: number\n    ttl: number\n  }>\n  lastSync: number\n  version: string\n}\n\n// Debug types\nexport interface FeatureFlagDebugInfo {\n  flagKey: string\n  enabled: boolean\n  config: Record<string, any>\n  source: 'cache' | 'network' | 'fallback'\n  evaluationTime: number\n  reason?: string\n  user: Pick<User, 'id' | 'organisation_id'>\n  organisation?: string\n  cacheStatus?: 'hit' | 'miss' | 'stale'\n}"],"names":["FeatureFlagError","Error","constructor","message","flagKey","statusCode","name"],"mappings":";;;;+BAmIaA;;;eAAAA;;;AAAN,MAAMA,yBAAyBC;IACpCC,YACEC,OAAe,EACf,AAAgBC,OAAgB,EAChC,AAAgBC,UAAmB,CACnC;QACA,KAAK,CAACF;aAHUC,UAAAA;aACAC,aAAAA;QAGhB,IAAI,CAACC,IAAI,GAAG;IACd;AACF"}