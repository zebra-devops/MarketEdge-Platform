5a9b99853f256d2d7934945a5a095d4d
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    moduleFeatureFlagKeys: function() {
        return moduleFeatureFlagKeys;
    },
    useAccessibleModules: function() {
        return useAccessibleModules;
    },
    useModuleCapabilities: function() {
        return useModuleCapabilities;
    },
    useModuleDashboard: function() {
        return useModuleDashboard;
    },
    useModuleDiscovery: function() {
        return useModuleDiscovery;
    },
    useModuleFeatureFlagCache: function() {
        return useModuleFeatureFlagCache;
    },
    useModuleFeatureFlags: function() {
        return useModuleFeatureFlags;
    },
    useModuleFlagHierarchy: function() {
        return useModuleFlagHierarchy;
    },
    useModuleHealth: function() {
        return useModuleHealth;
    }
});
const _reactquery = require("react-query");
const _useAuth = require("./useAuth");
const _modulefeatureflagapi = require("../services/module-feature-flag-api");
const moduleFeatureFlagKeys = {
    all: [
        "moduleFeatureFlags"
    ],
    modules: ()=>[
            "moduleFeatureFlags",
            "modules"
        ],
    module: (moduleId)=>[
            "moduleFeatureFlags",
            "module",
            moduleId
        ],
    discovery: (userId)=>[
            "moduleFeatureFlags",
            "discovery",
            userId
        ],
    hierarchy: (moduleId)=>[
            "moduleFeatureFlags",
            "hierarchy",
            moduleId
        ],
    capabilities: (moduleId)=>[
            "moduleFeatureFlags",
            "capabilities",
            moduleId
        ],
    health: (moduleId)=>[
            "moduleFeatureFlags",
            "health",
            moduleId
        ],
    accessible: ()=>[
            "moduleFeatureFlags",
            "accessible"
        ]
};
// Default options
const DEFAULT_OPTIONS = {
    includeDisabled: false,
    moduleTypes: [],
    categories: [],
    requiredFlagsOnly: false,
    includeInherited: true,
    hierarchyDepth: 4,
    cacheTime: 5 * 60 * 1000,
    staleTime: 2 * 60 * 1000,
    refetchInterval: false,
    preloadCapabilities: true,
    batchSize: 10
};
function useModuleFeatureFlags(options = {}) {
    const { user, isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.modules(),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getModulesWithFlags(),
        enabled: isAuthenticated,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        onError: (error)=>{
            console.warn("Module feature flags check failed:", error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.modules());
        return query.refetch();
    };
    // Process module flags data
    const moduleFlags = {};
    const moduleConfigs = {};
    const enabledModules = [];
    const disabledModules = [];
    const moduleCapabilities = {};
    if (query.data) {
        query.data.forEach((moduleData)=>{
            const moduleId = moduleData.module.id;
            const hasRequiredFlags = moduleData.module.required_flags.every((flagKey)=>moduleData.enabled_flags[flagKey]?.enabled);
            // Module is enabled if all required flags are enabled
            const moduleEnabled = hasRequiredFlags && moduleData.health_status !== "unavailable";
            moduleFlags[moduleId] = moduleEnabled;
            if (moduleEnabled) {
                enabledModules.push(moduleId);
            } else {
                disabledModules.push(moduleId);
            }
            // Collect module configurations
            moduleConfigs[moduleId] = {};
            Object.entries(moduleData.enabled_flags).forEach(([flagKey, flagData])=>{
                moduleConfigs[moduleId][flagKey] = flagData.config || {};
            });
            // Collect capabilities
            moduleCapabilities[moduleId] = moduleData.available_capabilities;
        });
    }
    return {
        moduleFlags,
        moduleConfigs,
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        enabledModules,
        disabledModules,
        moduleCapabilities,
        refetch,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useModuleDiscovery(userId, options = {}) {
    const { user, isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const effectiveUserId = userId || user?.id;
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.discovery(effectiveUserId),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.discoverEnabledModules(effectiveUserId, user?.organisation_id),
        enabled: isAuthenticated,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        onError: (error)=>{
            console.warn("Module discovery failed:", error);
        }
    });
    const refresh = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.discovery(effectiveUserId));
        return query.refetch();
    };
    return {
        enabledModules: query.data?.enabled_modules || [],
        disabledModules: query.data?.disabled_modules || [],
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        totalAvailable: query.data?.total_available || 0,
        userAccessible: query.data?.user_accessible || 0,
        refresh,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useModuleFlagHierarchy(moduleId, options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.hierarchy(moduleId),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getModuleFlagHierarchy(moduleId),
        enabled: isAuthenticated && !!moduleId,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        onError: (error)=>{
            console.warn(`Module flag hierarchy check failed for '${moduleId}':`, error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.hierarchy(moduleId));
        return query.refetch();
    };
    // Extract effective flags and configs
    const effectiveFlags = {};
    const flagConfigs = {};
    if (query.data?.effective_flags) {
        Object.entries(query.data.effective_flags).forEach(([flagKey, flagData])=>{
            effectiveFlags[flagKey] = flagData.enabled;
            flagConfigs[flagKey] = flagData.config || {};
        });
    }
    const getInheritanceChain = (flagKey)=>{
        if (!query.data?.inheritance_chain) return [];
        return query.data.inheritance_chain.filter((chain)=>chain.flag_key === flagKey);
    };
    return {
        hierarchy: query.data || null,
        effectiveFlags,
        flagConfigs,
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        getInheritanceChain,
        refetch
    };
}
function useModuleCapabilities(moduleId, capabilities, options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.capabilities(moduleId),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.checkModuleCapabilities(moduleId, capabilities),
        enabled: isAuthenticated && !!moduleId && capabilities.length > 0,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        onError: (error)=>{
            console.warn(`Module capabilities check failed for '${moduleId}':`, error);
        }
    });
    const refetch = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.capabilities(moduleId));
        return query.refetch();
    };
    const hasCapability = (capability)=>{
        return query.data?.[capability] || false;
    };
    const getEnabledCapabilities = ()=>{
        if (!query.data) return [];
        return Object.entries(query.data).filter(([, enabled])=>enabled).map(([capability])=>capability);
    };
    const getDisabledCapabilities = ()=>{
        if (!query.data) return [];
        return Object.entries(query.data).filter(([, enabled])=>!enabled).map(([capability])=>capability);
    };
    return {
        capabilities: query.data || {},
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        hasCapability,
        getEnabledCapabilities,
        getDisabledCapabilities,
        refetch,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useAccessibleModules(options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.accessible(),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getUserAccessibleModules(),
        enabled: isAuthenticated,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval,
        onError: (error)=>{
            console.warn("Accessible modules check failed:", error);
        }
    });
    const refresh = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.accessible());
        return query.refetch();
    };
    return {
        accessibleModules: query.data?.enabled_modules || [],
        restrictedModules: query.data?.disabled_modules || [],
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        refresh,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useModuleHealth(moduleId, options = {}) {
    const { isAuthenticated } = (0, _useAuth.useAuth)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const mergedOptions = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const query = (0, _reactquery.useQuery)({
        queryKey: moduleFeatureFlagKeys.health(moduleId),
        queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getModuleHealth(moduleId),
        enabled: isAuthenticated && !!moduleId,
        cacheTime: mergedOptions.cacheTime,
        staleTime: mergedOptions.staleTime,
        refetchInterval: mergedOptions.refetchInterval || 60000,
        onError: (error)=>{
            console.warn(`Module health check failed for '${moduleId}':`, error);
        }
    });
    const refresh = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.health(moduleId));
        return query.refetch();
    };
    const isHealthy = ()=>{
        return query.data?.status === "healthy";
    };
    const isDegraded = ()=>{
        return query.data?.status === "degraded";
    };
    const isUnavailable = ()=>{
        return query.data?.status === "unavailable";
    };
    return {
        health: query.data || null,
        isLoading: query.isLoading,
        error: query.error instanceof Error ? query.error : null,
        isHealthy,
        isDegraded,
        isUnavailable,
        refresh,
        lastUpdated: query.dataUpdatedAt ? new Date(query.dataUpdatedAt) : undefined
    };
}
function useModuleFeatureFlagCache() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const invalidateModule = (moduleId)=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.module(moduleId));
        queryClient.invalidateQueries(moduleFeatureFlagKeys.hierarchy(moduleId));
        queryClient.invalidateQueries(moduleFeatureFlagKeys.capabilities(moduleId));
        queryClient.invalidateQueries(moduleFeatureFlagKeys.health(moduleId));
    };
    const invalidateAllModules = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.all);
    };
    const invalidateDiscovery = ()=>{
        queryClient.invalidateQueries(moduleFeatureFlagKeys.discovery());
        queryClient.invalidateQueries(moduleFeatureFlagKeys.accessible());
    };
    const preloadModule = async (moduleId, capabilities = [])=>{
        try {
            const promises = [
                queryClient.prefetchQuery({
                    queryKey: moduleFeatureFlagKeys.hierarchy(moduleId),
                    queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getModuleFlagHierarchy(moduleId),
                    staleTime: DEFAULT_OPTIONS.staleTime
                }),
                queryClient.prefetchQuery({
                    queryKey: moduleFeatureFlagKeys.health(moduleId),
                    queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.getModuleHealth(moduleId),
                    staleTime: DEFAULT_OPTIONS.staleTime
                })
            ];
            if (capabilities.length > 0) {
                promises.push(queryClient.prefetchQuery({
                    queryKey: moduleFeatureFlagKeys.capabilities(moduleId),
                    queryFn: ()=>_modulefeatureflagapi.moduleFeatureFlagApiService.checkModuleCapabilities(moduleId, capabilities),
                    staleTime: DEFAULT_OPTIONS.staleTime
                }));
            }
            await Promise.allSettled(promises);
        } catch (error) {
            console.warn(`Failed to preload module '${moduleId}':`, error);
        }
    };
    return {
        invalidateModule,
        invalidateAllModules,
        invalidateDiscovery,
        preloadModule
    };
}
function useModuleDashboard(moduleId, capabilities = []) {
    const moduleFlags = useModuleFeatureFlags();
    const hierarchy = useModuleFlagHierarchy(moduleId);
    const moduleCapabilities = useModuleCapabilities(moduleId, capabilities);
    const health = useModuleHealth(moduleId);
    const isModuleEnabled = moduleFlags.moduleFlags[moduleId] || false;
    const moduleConfig = moduleFlags.moduleConfigs[moduleId] || {};
    return {
        // Module state
        isModuleEnabled,
        moduleConfig,
        // Detailed data
        flags: moduleFlags,
        hierarchy,
        capabilities: moduleCapabilities,
        health,
        // Convenience methods
        hasCapability: moduleCapabilities.hasCapability,
        isHealthy: health.isHealthy,
        // Loading states
        isLoading: moduleFlags.isLoading || hierarchy.isLoading || moduleCapabilities.isLoading || health.isLoading,
        // Error states
        hasError: !!(moduleFlags.error || hierarchy.error || moduleCapabilities.error || health.error),
        // Refresh methods
        refresh: ()=>{
            moduleFlags.refetch();
            hierarchy.refetch();
            moduleCapabilities.refetch();
            health.refresh();
        }
    };
}

//# sourceMappingURL=data:application/json;base64,