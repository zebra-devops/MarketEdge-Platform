ac28c3a4fc0214308409f452eeaf3503
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ApplicationIcons;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _navigation = require("next/navigation");
const _outline = require("@heroicons/react/24/outline");
const _solid = require("@heroicons/react/24/solid");
const _LoadingSpinner = /*#__PURE__*/ _interop_require_default(require("./LoadingSpinner"));
const _applicationaccess = require("../../utils/application-access");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const applications = [
    {
        id: "market_edge",
        name: "Market Edge",
        displayName: "Market Edge",
        route: "/market-edge",
        outlineIcon: _outline.ChartBarIcon,
        solidIcon: _solid.ChartBarIcon,
        color: "from-blue-500 to-indigo-600",
        themeColor: "blue",
        description: "Competitive Intelligence & Market Analysis"
    },
    {
        id: "causal_edge",
        name: "Causal Edge",
        displayName: "Causal Edge",
        route: "/causal-edge",
        outlineIcon: _outline.ShareIcon,
        solidIcon: _solid.ShareIcon,
        color: "from-green-500 to-emerald-600",
        themeColor: "green",
        description: "Business Process & Causal Analysis"
    },
    {
        id: "value_edge",
        name: "Value Edge",
        displayName: "Value Edge",
        route: "/value-edge",
        outlineIcon: _outline.SparklesIcon,
        solidIcon: _solid.SparklesIcon,
        color: "from-purple-500 to-violet-600",
        themeColor: "purple",
        description: "Value Engineering & ROI Analysis"
    }
];
function ApplicationIcons({ className = "", userApplicationAccess = [] }) {
    const router = (0, _navigation.useRouter)();
    const pathname = (0, _navigation.usePathname)();
    const [currentApplication, setCurrentApplication] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(null);
    const [tooltipVisible, setTooltipVisible] = (0, _react.useState)(null);
    // Get current application from pathname
    (0, _react.useEffect)(()=>{
        const currentApp = applications.find((app)=>pathname.startsWith(app.route));
        if (currentApp) {
            setCurrentApplication(currentApp);
            // Save to localStorage (client-side only)
            if (typeof window !== "undefined") {
                localStorage.setItem("currentApplication", currentApp.id);
            }
        } else {
            // Try to restore from localStorage (client-side only)
            if (typeof window !== "undefined") {
                const savedAppId = localStorage.getItem("currentApplication");
                const savedApp = applications.find((app)=>app.id === savedAppId);
                if (savedApp && hasUserAccess(savedApp)) {
                    setCurrentApplication(savedApp);
                }
            }
        }
    }, [
        pathname,
        userApplicationAccess
    ]);
    // Filter applications based on user application access
    const accessibleApplications = applications.filter((app)=>hasUserAccess(app));
    function hasUserAccess(app) {
        return (0, _applicationaccess.hasApplicationAccess)(userApplicationAccess, app.id);
    }
    const handleApplicationSwitch = async (application)=>{
        if (application.id === currentApplication?.id || isLoading) return;
        setIsLoading(application.id);
        try {
            // Save to localStorage (client-side only)
            if (typeof window !== "undefined") {
                localStorage.setItem("currentApplication", application.id);
            }
            // Navigate to the application
            router.push(application.route);
            setCurrentApplication(application);
            setTooltipVisible(null);
        } catch (error) {
            console.error("Failed to switch application:", error);
        } finally{
            setIsLoading(null);
        }
    };
    // Don't show if user has access to only one application or none
    if (accessibleApplications.length <= 1) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `flex items-center space-x-1 sm:space-x-2 ${className}`,
        children: accessibleApplications.map((application)=>{
            const isCurrent = application.id === currentApplication?.id;
            const isLoadingThis = isLoading === application.id;
            const IconComponent = isCurrent ? application.solidIcon : application.outlineIcon;
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>handleApplicationSwitch(application),
                        onMouseEnter: ()=>setTooltipVisible(application.id),
                        onMouseLeave: ()=>setTooltipVisible(null),
                        onTouchStart: ()=>setTooltipVisible(application.id),
                        onTouchEnd: ()=>setTimeout(()=>setTooltipVisible(null), 2000),
                        disabled: isLoadingThis,
                        className: `
                relative group p-1.5 sm:p-2 rounded-lg transition-all duration-200 ease-in-out
                ${isCurrent ? `bg-gradient-to-br ${application.color} text-white shadow-md ring-2 ring-white ring-opacity-50` : "text-gray-500 hover:text-gray-700 hover:bg-gray-100 active:bg-gray-200"}
                ${isLoadingThis ? "opacity-50 cursor-not-allowed" : "cursor-pointer hover:scale-105 active:scale-95"}
                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500
                transform-gpu
              `,
                        "aria-label": `Switch to ${application.displayName}`,
                        title: application.displayName,
                        children: isLoadingThis ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                            size: "sm",
                            className: "w-5 h-5 sm:w-6 sm:h-6"
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(IconComponent, {
                                    className: "w-5 h-5 sm:w-6 sm:h-6"
                                }),
                                isCurrent && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute -bottom-0.5 left-1/2 transform -translate-x-1/2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-1 h-1 bg-white rounded-full shadow-sm"
                                    })
                                })
                            ]
                        })
                    }),
                    tooltipVisible === application.id && !isLoadingThis && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 z-50 pointer-events-none",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "bg-gray-900 text-white px-2 py-1.5 sm:px-3 sm:py-2 rounded-md text-xs sm:text-sm whitespace-nowrap shadow-lg max-w-xs",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "font-medium",
                                    children: application.displayName
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "text-xs opacity-90 hidden sm:block",
                                    children: application.description
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute top-full left-1/2 transform -translate-x-1/2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"
                                    })
                                })
                            ]
                        })
                    })
                ]
            }, application.id);
        })
    });
}

//# sourceMappingURL=data:application/json;base64,